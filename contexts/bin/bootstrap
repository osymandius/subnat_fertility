#!/usr/bin/env Rscript
# Autogenerated by context; do not edit
library(methods)
local({
context_cache <- NULL
bootstrap_context <- function (args = commandArgs(TRUE), name = "context", n = 0L) 
{
    if (!nzchar(Sys.getenv("CONTEXT_QUIET"))) {
        options(context.log = TRUE)
    }
    args <- parse_context_args(args, name, n)
    context_log("hello", Sys_time())
    context_log("wd", getwd())
    if (nzchar(Sys.getenv("CONTEXT_BOOTSTRAP"))) {
        context_log("bootstrap", "")
        use_local_library(path_library(args$root))
    }
    if (!requireNamespace("context", quietly = TRUE)) {
        stop("Could not find context package; aborting startup")
    }
    invisible(args$args)
}
assert_character <- function (x, name = deparse(substitute(x))) 
{
    if (!is.character(x)) {
        stop(sprintf("%s must be character", name), call. = FALSE)
    }
}
assert_nonmissing <- function (x, name = deparse(substitute(x))) 
{
    if (any(is.na(x))) {
        stop(sprintf("%s must not be NA", name), call. = FALSE)
    }
}
assert_scalar <- function (x, name = deparse(substitute(x))) 
{
    if (length(x) != 1) {
        stop(sprintf("%s must be a scalar", name), call. = FALSE)
    }
}
assert_scalar_character <- function (x, name = deparse(substitute(x))) 
{
    assert_scalar(x, name)
    assert_character(x, name)
    assert_nonmissing(x, name)
}
context_log <- function (topic, value) 
{
    if (isTRUE(getOption("context.log"))) {
        n <- length(value) - 1L
        if (n > 0L) {
            topic <- c(topic, rep_len("...", n))
        }
        str <- trimws(sprintf("[ %-9s ]  %s", topic, value))
        if (n > 0L) {
            str <- paste(str, collapse = "\n")
        }
        message(str)
        if (!is.null(context_cache$cl)) {
            parallel::clusterCall(context_cache$cl, "message", 
                str)
        }
    }
}
match_value <- function (x, choices, name = deparse(substitute(x))) 
{
    assert_scalar_character(x, name)
    i <- match(x, choices)
    if (is.na(i)) {
        stop(sprintf("%s must be one of {%s}", name, paste(choices, 
            collapse = ", ")), call. = FALSE)
    }
    choices[[i]]
}
parse_context_args <- function (args, name, nargs) 
{
    rec <- length(args)
    req <- nargs + 1L
    if (rec < req[[1L]]) {
        stop(sprintf("At least %d %s required (given %d)\nUsage: %s <root> ...", 
            req[[1L]], ngettext(req[[1L]], "argument", "arguments"), 
            rec, name), call. = FALSE)
    }
    if (length(nargs) == 2L && rec > req[[2L]]) {
        stop(sprintf("At most %d arguments allowed (given %d)\nUsage: %s <root> ...", 
            req[[2]], rec, name), call. = FALSE)
    }
    list(n = rec - 1L, root = args[[1L]], args = args[-1L])
}
path_library <- function (path_root, platform = NULL, version = NULL) 
{
    if (is.null(version)) {
        version_str <- as.character(r_version(2))
    }
    else {
        if (!inherits(version, "numeric_version")) {
            version <- numeric_version(version)
        }
        version_str <- as.character(version[1, 1:2])
    }
    platform_str <- r_platform_name(platform)
    file.path(path_root, "lib", platform_str, version_str)
}
r_platform_name <- function (platform = NULL) 
{
    if (is.null(platform)) {
        tolower(Sys.info()[["sysname"]])
    }
    else {
        match_value(platform, valid_platforms())
    }
}
r_version <- function (n) 
{
    if (n < 1L || n > 3L) {
        stop("Invalid n")
    }
    getRversion()[1, seq_len(n)]
}
Sys_time <- function () 
{
    op <- options(digits.secs = 3)
    on.exit(options(op))
    as.character(Sys.time())
}
use_local_library <- function (lib) 
{
    if (file.exists(lib)) {
        .libPaths(union(lib, .libPaths()))
        Sys.setenv(R_LIBS_USER = lib)
        context_log("lib", lib)
    }
    else {
        warning(sprintf("library not found at %s", lib, call. = FALSE, 
            immediate. = TRUE))
        context_log("lib", sprintf("warning: library not found at %s", 
            lib))
    }
}
valid_platforms <- function () 
{
    c("windows", "macosx", "macosx/mavericks", "linux")
}
bootstrap_context(name = 'context_bootstrap', n = 1L)
})
