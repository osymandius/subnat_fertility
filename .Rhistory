<<<<<<< Updated upstream
period = unique(mf$period),
age_group = unique(mf$age_group)
) %>%
mutate(idx = factor(row_number()))
obs_nat <- mics_asfr %>%
mutate(period = factor(period, levels(mf$period))) %>%
left_join(mf_nat) %>%
select(area_id, period, age_group, tips, births, pys, idx) %>%
mutate(tips_dummy = as.integer(tips > 5),
tips_f = factor(tips, levels(obs$tips_f)),
age_group = factor(age_group, levels(mf$age_group)),
idx =factor(idx, levels(mf_nat$idx))
)
M_obs_nat <- sparse.model.matrix(~0 + idx, obs_nat)
X_mf <- model.matrix(~1 + age_group + period + area_id, mf)
Z_spatial_mf <- sparse.model.matrix(~0 + area_id, mf)
Z_age_mf <- sparse.model.matrix(~0 + age_group, mf)
Z_period_mf <- sparse.model.matrix(~0 + period, mf)
#' This has dimensions (number of observations) x (number of rows in model frame (i.e crossing of age x time x space))
#' Many more rows than mf because observations has things we need to adjust for bias (e.g. tips), but not required in model frame.
#' Column index (idx) has been joined onto obs dataframe from mf. So now each observation is labelled with the appropriate index in the mf
M_obs <- Matrix::sparse.model.matrix(~0 + idx, obs)
sh <- areas_long %>%
filter(iso3 == iso3_current, naomi_level) %>%
mutate(area_idx = row_number())
#' Neighbor list
nb <- sh %>%
left_join(boundaries) %>%
st_as_sf %>%
as("Spatial") %>%
spdep::poly2nb() %>%
`names<-`(sh$area_idx)
adj <- nb2mat(nb, zero.policy=TRUE, style="B")
Q_spatial <- INLA::inla.scale.model(diag(rowSums(adj)) - 0.99*adj,
constr = list(A = matrix(1, 1, nrow(adj)), e = 0))
Z_tips <- sparse.model.matrix(~0 + tips_f, obs)
Z_tips_nat <- sparse.model.matrix(~0 + tips_f, obs_nat)
#' Create precision matrix for RW1
D_tips <- diff(diag(ncol(Z_tips)), differences = 1)
Q_tips <- as(t(D_tips) %*% D_tips, "dgCMatrix")
Z_age <- sparse.model.matrix(~0 + age_group, obs)
D_age <- diff(diag(ncol(Z_age)), differences = 1)
Q_age <- t(D_age) %*% D_age
diag(Q_age) <- diag(Q_age) + 1E-6
Q_age <- as(Q_age, "dgCMatrix")
Z_period <- sparse.model.matrix(~0 + period, obs)
D_period <- diff(diag(ncol(Z_period)), differences = 2)
Q_period <- t(D_period) %*% D_period
diag(Q_period) <- diag(Q_period) + 1E-6
Q_period <- as(Q_period, "dgCMatrix")
X_tips_dummy <- model.matrix(~0 + tips_dummy, obs)
X_tips_dummy_nat <- model.matrix(~0 + tips_dummy, obs_nat)
mf_out <- crossing(
area_id = area_aggregation$area_id,
age_group = unique(mf$age_group),
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number())
join_out <- crossing(area_aggregation,
age_group = unique(mf$age_group),
=======
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf",  "u_age", "beta_tips_dummy", "u_period", "u_spatial_str", "u_spatial_iid"),
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
f <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
# random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE,
checkParameterOrder=FALSE)
fit <- nlminb(f$par, f$fn, f$gr)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
View(mics_data)
mics_plot <- Map(calc_asfr_mics, mics_data$wm, y=list(1),
by = list(~area_id + survyear + surveyid + survtype),
tips = list(c(0,5)),
agegr= list(3:10*5),
period = list(1995:2019),
counts = TRUE,
bhdata = mics_data$bh_df) %>%
bind_rows %>%
type.convert() %>%
filter(period <= survyear) %>%
rename(age_group = agegr)
dhs_iso3 <- dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
mutate(iso3 = countrycode(CountryName, "country.name", "iso3c"),
iso3 = ifelse(CountryName == "Eswatini", "SWZ", iso3))
clusters <- readRDS(here("input_data/clusters_2019_11_21.rds")) %>%
mutate(iso3 = survey_id) %>%
separate(col="iso3", into="iso3", sep=3) %>%
left_join(dhs_iso3 %>% select(-CountryName), by="iso3") %>%
separate(survey_id, into=c(NA, "surv"), sep=3, remove=FALSE) %>%
mutate(DHS_survey_id = paste0(DHS_CountryCode, surv)) %>%
separate(surv, into=c(NA, "SurveyType"), sep=-3) %>%
filter(iso3 == iso3_current, DHS_CountryCode != "OS") %>%
filter(!survey_id %in% c("MOZ2009AIS", "TZA2003AIS", "UGA2011AIS"))
## Get surveys for which we have clusters. Split into country list.
surveys <- dhs_surveys(surveyIds = unique(clusters$DHS_survey_id)) %>%
left_join(clusters %>%
select(c(DHS_survey_id, survey_id, iso3)) %>%
distinct,
by=c("SurveyId" = "DHS_survey_id")) %>%
filter(!SurveyId %in% c("MZ2009AIS", "TZ2003AIS", "UG2011AIS"),
iso3 == iso3_current
)
## Needs check to ensure level is < max_level
cluster_areas <- assign_cluster_area(clusters, 1)
dat <- clusters_to_surveys(surveys, cluster_areas, single_tips = FALSE)
asfr <- Map(calc_asfr1, dat$ir,
y=1:length(dat$ir),
by = list(~country + surveyid + survtype + survyear + area_id),
tips = dat$tips_surv,
agegr= list(3:10*5),
period = list(1995:2017),
counts = TRUE) %>%
bind_rows %>%
type.convert %>%
filter(period<=survyear) %>%
rename(age_group = agegr) %>%
mutate(iso3 = countrycode(country, "country.name", "iso3c"),
iso3 = ifelse(country == "Eswatini", "SWZ", iso3)) %>%
select(-country)
asfr_admin1 <- asfr
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==1) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
View(asfr_admin1)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==1) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(age_group~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==1) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_grid(age_group~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==1) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_grid(age_group~area_id) +
ylim(0,0.3)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_grid(age_group~area_id) +
ylim(0,0.3)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
crossing(age_group_out = "15-49", age_group = unique(mf$age_group))
area_aggregation$area_id
area_aggregation
rep <- sdreport(f)
tmb_res <- summary(rep)
View(tmb_res)
crossing(age_group_out = "15-49", age_group = unique(mf$age_group))
crossing(
area_id = area_aggregation$area_id,
age_group = c(unique(mf$age_group), "15-49"),
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number())
crossing(
area_id = area_aggregation$area_id,
age_group = c(unique(mf$age_group), "15-49"),
period = unique(mf$period)
)
c(unique(mf$age_group), "15-49")
get_age_group_out(unique(mf$age_group))
c(as.character(unique(mf$age_group)), "15-49")
get_age_groups()
age_group_out <- c(as.character(unique(mf$age_group)), "15-49")
age_group_join <- get_age_groups() %>%
dplyr::filter(age_group %in% age_group_out) %>%
stats::setNames(paste0(names(.), "_out")) %>%
tidyr::crossing(get_age_groups() %>%
dplyr::filter(age_group %in% age_groups)) %>%
dplyr::filter(age_group_start_out <= age_group_start,
age_group_span_out == Inf |
(age_group_start + age_group_span) <=
(age_group_start_out + age_group_span_out)) %>%
dplyr::select(age_group_out, age_group)
get_age_groups() %>%
filter(age_group %in% age_group_out)
get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out"))
get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(age_group %in% age_groups))
get_age_groups()
get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(unique(mf$age_group) %in% age_groups))
get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(age_group %in% unique(mf$age_group)))
get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(age_group %in% unique(mf$age_group))) %>%
filter(age_group_start_out <= age_group_start,
age_group_span_out == Inf |
(age_group_start + age_group_span) <=
(age_group_start_out + age_group_span_out)) %>%
select(age_group_out, age_group)
age_group_join <- get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(age_group %in% unique(mf$age_group))) %>%
filter(age_group_start_out <= age_group_start,
age_group_span_out == Inf |
(age_group_start + age_group_span) <=
(age_group_start_out + age_group_span_out)) %>%
select(age_group_out, age_group)
crossing(
area_id = area_aggregation$area_id,
age_group = age_group_out,
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number())
mf_out <- crossing(
area_id = area_aggregation$area_id,
age_group = age_group_out,
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number())
crossing(area_aggregation,
age_group = age_group_join,
period = unique(mf$period))
View(crossing(area_aggregation,
age_group = age_group_join,
period = unique(mf$period)))
area_aggregation
View(crossing(area_aggregation,
age_group_join,
period = unique(mf$period)))
crossing(area_aggregation,
age_group_join,
period = unique(mf$period)) %>%
full_join(mf %>%
select(area_id, age_group, period, idx), by = c("model_area_id" = "area_id",
"age_group",
"period")
)
join_out <- crossing(area_aggregation,
age_group_join,
period = unique(mf$period)) %>%
full_join(mf %>%
select(area_id, age_group, period, idx), by = c("model_area_id" = "area_id",
"age_group",
"period")
)
View(join_out)
View(mf_out)
join_out <- crossing(area_aggregation,
age_group_join,
period = unique(mf$period)) %>%
full_join(mf %>%
select(area_id, age_group, period, idx), by = c("model_area_id" = "area_id",
"age_group",
"period")
) %>%
# full_join(mf_out) %>%
full_join(mf_out, by=c("area_id",
"period",
"age_group_out" = "age_group")
) %>%
mutate(x=1)
View(join_out %>% arrange(age_group_out))
View(join_out %>% arrange(age_group_out, period))
join_out <- crossing(area_aggregation,
age_group_join,
>>>>>>> Stashed changes
period = unique(mf$period)) %>%
full_join(mf %>%
select(area_id, age_group, period, idx), by = c("model_area_id" = "area_id",
"age_group",
"period")
) %>%
<<<<<<< Updated upstream
full_join(mf_out) %>%
# full_join(mf_out, by=c("area_id" = "area_id",
#                        "period",
#                        "age_group_out" = "age_group")
#           ) %>%
mutate(x=1)
A_out <- spMatrix(nrow(mf_out), nrow(mf), join_out$out_idx, as.integer(join_out$idx), join_out$x)
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
=======
# full_join(mf_out) %>%
full_join(mf_out, by=c("area_id",
"period",
"age_group_out" = "age_group")
) %>%
mutate(x=ifelse(age_group_out == "15-49", 5, 1))
View(join_out)
mf_out <- crossing(
area_id = area_aggregation$area_id,
age_group = age_group_out,
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number(),
indicator = ifelse(age_group_out == "15-49", "tfr", "asfr"))
View(mf_out)
mf_out <- crossing(
area_id = area_aggregation$area_id,
age_group = age_group_out,
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number(),
indicator = ifelse(age_group == "15-49", "tfr", "asfr"))
View(mf_out)
A_out <- spMatrix(nrow(mf_out), nrow(mf), join_out$out_idx, as.integer(join_out$idx), join_out$x)
dim(A_out)
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
>>>>>>> Stashed changes
data <- list(X_mf = X_mf,
M_obs = M_obs,
M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
Z_tips_nat = Z_tips_nat,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
<<<<<<< Updated upstream
Z_spatial_mf = Z_spatial_mf,
Z_age_mf = Z_age_mf,
Z_period_mf = Z_period_mf,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, obs),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, obs),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, obs),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, obs),
# interaction_idx = interaction_idx,
Q_tips = Q_tips,
Q_age = Q_age,
Q_period = Q_period,
Q_spatial = Q_spatial,
# A_national = A_national,
log_offset = log(obs$pys),
log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out,
A_nat = A_nat
)
data <- list(X_mf = X_mf,
M_obs = M_obs,
M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
Z_tips_nat = Z_tips_nat,
# Z_age = Z_age,
# Z_period = Z_period,
# Z_spatial = Z_spatial,
Z_spatial_mf = Z_spatial_mf,
Z_age_mf = Z_age_mf,
Z_period_mf = Z_period_mf,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, obs),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, obs),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, obs),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, obs),
# interaction_idx = interaction_idx,
=======
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf),
Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf),
Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf),
>>>>>>> Stashed changes
Q_tips = Q_tips,
Q_age = Q_age,
Q_period = Q_period,
Q_spatial = Q_spatial,
# A_national = A_national,
log_offset = log(obs$pys),
log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out,
A_nat = A_nat
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
<<<<<<< Updated upstream
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age_mf)),
u_period = rep(0, ncol(Z_period_mf)),
u_spatial_str = rep(0, ncol(Z_spatial_mf)),
u_spatial_iid = rep(0, ncol(Z_spatial_mf)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
=======
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
>>>>>>> Stashed changes
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf",  "u_age", "beta_tips_dummy", "u_period", "u_spatial_str", "u_spatial_iid"),
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
<<<<<<< Updated upstream
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
data <- list(X_mf = X_mf,
M_obs = M_obs,
M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
Z_tips_nat = Z_tips_nat,
# Z_age = Z_age,
# Z_period = Z_period,
# Z_spatial = Z_spatial,
Z_spatial_mf = Z_spatial_mf,
Z_age_mf = Z_age_mf,
Z_period_mf = Z_period_mf,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, obs),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, obs),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, obs),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, obs),
# interaction_idx = interaction_idx,
Q_tips = Q_tips,
Q_age = Q_age,
Q_period = Q_period,
Q_spatial = Q_spatial,
# A_national = A_national,
log_offset = log(obs$pys),
log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out,
A_nat = A_nat
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age_mf)),
u_period = rep(0, ncol(Z_period_mf)),
u_spatial_str = rep(0, ncol(Z_spatial_mf)),
u_spatial_iid = rep(0, ncol(Z_spatial_mf)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf",  "u_age", "beta_tips_dummy", "u_period", "u_spatial_str", "u_spatial_iid"),
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
fit <- nlminb(f$par, f$fn, f$gr)
fit <- nlminb(f$par, f$fn, f$gr)
f <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid"),
=======
f <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
# random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid"),
>>>>>>> Stashed changes
hessian = FALSE,
checkParameterOrder=FALSE)
fit <- nlminb(f$par, f$fn, f$gr)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
<<<<<<< Updated upstream
filter(area_level ==0) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~age_group)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~age_group)
=======
filter(area_level ==2, indicator == "tfr")
>>>>>>> Stashed changes
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
<<<<<<< Updated upstream
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
obs
View(obs)
crossing(area_id = "ZWE",
period = unique(mf$period),
age_group = unique(mf$age_group)
)
obs
dim(A_nat)
View(obs)
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
dyn.unload(dynlib("tmb/fertility_tmb_dev"))
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
data <- list(X_mf = X_mf,
M_obs = M_obs,
M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
Z_tips_nat = Z_tips_nat,
# Z_age = Z_age,
# Z_period = Z_period,
# Z_spatial = Z_spatial,
Z_spatial_mf = Z_spatial_mf,
Z_age_mf = Z_age_mf,
Z_period_mf = Z_period_mf,
Z_interaction = sparse.model.matrix(~0 + id.interaction_3d, obs),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, obs),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, obs),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, obs),
# interaction_idx = interaction_idx,
Q_tips = Q_tips,
Q_age = Q_age,
Q_period = Q_period,
Q_spatial = Q_spatial,
# A_national = A_national,
log_offset = log(obs$pys),
log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out,
A_nat = A_nat
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age_mf)),
u_period = rep(0, ncol(Z_period_mf)),
u_spatial_str = rep(0, ncol(Z_spatial_mf)),
u_spatial_iid = rep(0, ncol(Z_spatial_mf)),
eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age_mf)),
u_period = rep(0, ncol(Z_period_mf)),
u_spatial_str = rep(0, ncol(Z_spatial_mf)),
u_spatial_iid = rep(0, ncol(Z_spatial_mf)),
eta = array(0, c(ncol(Z_spatial_mf), ncol(Z_age_mf), ncol(Z_period_mf))),
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf",  "u_age", "beta_tips_dummy", "u_period", "u_spatial_str", "u_spatial_iid"),
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
array(0, c(ncol(Z_spatial_mf), ncol(Z_age_mf), ncol(Z_period_mf)))
dim(array(0, c(ncol(Z_spatial_mf), ncol(Z_age_mf), ncol(Z_period_mf))))
63*7*24
dim(Z_spatial_mf)
dim(Z_age_mf)
dim(Z_period_mf)
dim(Z_interaction)
sparse.model.matrix(~0 + id.interaction_3d, obs)
sparse.model.matrix(~0 + id.interaction_3d, mf)
data <- list(X_mf = X_mf,
M_obs = M_obs,
M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
Z_tips_nat = Z_tips_nat,
# Z_age = Z_age,
# Z_period = Z_period,
# Z_spatial = Z_spatial,
Z_spatial_mf = Z_spatial_mf,
Z_age_mf = Z_age_mf,
Z_period_mf = Z_period_mf,
Z_interaction = sparse.model.matrix(~0 + id.interaction_3d, mf),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, obs),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, obs),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, obs),
# interaction_idx = interaction_idx,
Q_tips = Q_tips,
Q_age = Q_age,
Q_period = Q_period,
Q_spatial = Q_spatial,
# A_national = A_national,
log_offset = log(obs$pys),
log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out,
A_nat = A_nat
)
par <- list(beta_mf = rep(0, ncol(X_mf)),
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age_mf)),
u_period = rep(0, ncol(Z_period_mf)),
u_spatial_str = rep(0, ncol(Z_spatial_mf)),
u_spatial_iid = rep(0, ncol(Z_spatial_mf)),
eta = array(0, c(ncol(Z_spatial_mf), ncol(Z_age_mf), ncol(Z_period_mf))),
# eta1 = array(0, c(ncol(Z_age), ncol(Z_period))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_period = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
random = c("beta_mf",  "u_age", "beta_tips_dummy", "u_period", "u_spatial_str", "u_spatial_iid"),
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
f <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta"),
hessian = FALSE,
checkParameterOrder=FALSE)
fit <- nlminb(f$par, f$fn, f$gr)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0) %>%
ggplot(aes(x=period, y=val)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
f$report()$lambda_out
foo <- data.frame(val = f$report()$lambda_out)
mf_out %>%
# left_join(areas_long) %>%
cbind(foo) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0) %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_nat), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
mf_out %>%
# left_join(areas_long) %>%
cbind(foo) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0)
foo <- mf_out %>%
# left_join(areas_long) %>%
cbind(foo) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0)
foo
foo %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line()
f$report()
str(f$report())
str(f)
saveRDS(f, file="f.rds")
int <- readRDS("f.rds")
int$report()
int$report()$lambda_out
=======
filter(area_level ==1, indicator == "tfr") %>%
ggplot(aes(x=period, y=val, group=age_group, color=age_group)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
A_out
A_out[25,]
age_group_out <- c(as.character(unique(mf$age_group)), "15-49")
age_group_join <- get_age_groups() %>%
filter(age_group %in% age_group_out) %>%
setNames(paste0(names(.), "_out")) %>%
crossing(get_age_groups() %>%
filter(age_group %in% unique(mf$age_group))) %>%
filter(age_group_start_out <= age_group_start,
age_group_span_out == Inf |
(age_group_start + age_group_span) <=
(age_group_start_out + age_group_span_out)) %>%
select(age_group_out, age_group)
mf_out <- crossing(
area_id = area_aggregation$area_id,
age_group = unique(mf$age_group),
period = unique(mf$period)
) %>%
arrange(area_id, age_group, period) %>%
mutate(out_idx = row_number())
join_out <- crossing(area_aggregation,
age_group = unique(mf$age_group),
period = unique(mf$period)) %>%
full_join(mf %>%
select(area_id, age_group, period, idx), by = c("model_area_id" = "area_id",
"age_group",
"period")
) %>%
full_join(mf_out) %>%
# full_join(mf_out, by=c("area_id",
#                        "period",
#                        "age_group_out" = "age_group")
#           ) %>%
mutate(x=1)
A_out <- spMatrix(nrow(mf_out), nrow(mf), join_out$out_idx, as.integer(join_out$idx), join_out$x)
dim(A_out)
crossing(area_aggregation,
age_group_join,
period = unique(mf$period))
join_rate <- crossing(area_aggregation,
age_group_join,
period = unique(mf$period))
View(join_rate)
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period))
View(join_rate)
mutate(idx = group_indices(area_id, age_group_out, period)
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period))
crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period))
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out)
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out %>% rename(idx_col = idx_out) %>% select(-idx))
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out %>% rename(idx_col = out_idx) %>% select(-idx))
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out %>% select(area_id, age_group, period, out_idx) %>% distinct %>% rename(idx_col = out_idx) %>%)
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out %>% select(area_id, age_group, period, out_idx) %>% distinct %>% rename(idx_col = out_idx))
View(join_rate)
join_rate <- crossing(area_id = unique(join_out$area_id),
age_group_join,
period = unique(mf$period)) %>%
mutate(idx = group_indices(., area_id, age_group_out, period)) %>%
left_join(join_out %>% select(area_id, age_group, period, out_idx) %>% distinct %>% rename(idx_col = out_idx)) %>%
mutate(x=ifelse(age_group_out == "15-49", 5, 1))
drat:::add("ncov-ic")
install.packages(c("orderly", "vaultr", "orderlyweb"))
drat:::add("ncov-ic")
install.packages(c("orderly", "vaultr", "orderlyweb"))
install.packages(c("orderly", "vaultr", "orderlyweb"))
install.packages(c("orderly", "vaultr", "orderlyweb"))
install.packages(c("orderly", "vaultr", "orderlyweb"))
install.packages(c("orderly", "vaultr", "orderlyweb"))
>>>>>>> Stashed changes
