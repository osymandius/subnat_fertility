par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# beta_tips_dummy_mics = rep(0, ncol(X_tips_dummy_mics)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "beta_tips_dummy", "u_tips", "u_age", "u_period", "eta1", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
class(fit) <- "naomi_fit"  # this is hacky...
fit <- sample_tmb(fit, random_only=FALSE)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
df <- data.frame(est = summary(fit$sdreport)[,1], id = rownames(summary(fit$sdreport)))
fit$sdreport
df %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(df, id == "beta_tips_dummy")$est),
nat = est*exp(-4.5780159) + dummy,
trans = exp(est*exp(-4.5780159) + dummy),
)
foo <- df %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(df, id == "beta_tips_dummy")$est),
nat = est*exp(-4.5780159) + dummy,
trans = exp(est*exp(-4.5780159) + dummy),
)
foo %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans)) +
geom_point()+
geom_line()
filter(df, id == "beta_tips_dummy")$est
exp(0.03082672)
tips$tza <- foo
saveRDS(tips, "tips.rds")
df
tips
tips %>% bind_rows(.id = "iso")
tips %>% bind_rows(.id = "iso") %>% ggplot(aes(x=id, y=trans, group=iso, color=iso)) + geom_point() + geom_line()
tips %>% bind_rows(.id = "iso") %>% filter(id<11) %>% ggplot(aes(x=id, y=trans, group=iso, color=iso)) + geom_point() + geom_line()
View(df)
df <- readRDS("presentations/2020_04 UNPD/unpd_df.rds")
df$tips <- tips
saveRDS(df, "presentations/2020_04 UNPD/unpd_df.rds")
exc <- "MWI_5_07"
##sorry..
list2env(make_areas_population(iso3_current, naomi_data_path, full = FALSE), globalenv())
asfr <- get_asfr_pred_df(iso3_current, 5, project = FALSE) %>%
filter(survtype == "DHS")
iso3_current <- "MWI"
exc <- "MWI_5_07"
##sorry..
list2env(make_areas_population(iso3_current, naomi_data_path, full = FALSE), globalenv())
asfr <- get_asfr_pred_df(iso3_current, 5, project = FALSE) %>%
filter(survtype == "DHS")
mf <- make_model_frames(iso3_current, population, asfr, mics_asfr = NULL, exclude_districts = exc, project=FALSE)
Z_spatial <- sparse.model.matrix(~0 + area_id, mf$mf_model)
Z_age <- sparse.model.matrix(~0 + age_group, mf$mf_model)
Z_period <- sparse.model.matrix(~0 + period, mf$mf_model)
M_obs <- sparse.model.matrix(~0 + idx, mf$dist$obs)
Z_tips <- sparse.model.matrix(~0 + tips_f, mf$dist$obs)
X_tips_dummy <- model.matrix(~0 + tips_dummy, mf$dist$obs)
R_spatial <- make_adjacency_matrix(iso3_current, areas_long, boundaries, exclude_districts = exc, level=5)
R_tips <- make_rw_structure_matrix(ncol(Z_tips), 1, TRUE)
R_age <- make_rw_structure_matrix(ncol(Z_age), 1, TRUE)
R_period <- make_rw_structure_matrix(ncol(Z_period), 2, TRUE)
# dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
ar1_phi_age <- 0.99
ar1_phi_period <- 0.99
data <- list(
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
R_spatial = R_spatial,
ar1_phi_age = ar1_phi_age,
ar1_phi_period = ar1_phi_period,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population,
A_out = mf$out$A_out
)
par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# beta_tips_dummy_mics = rep(0, ncol(X_tips_dummy_mics)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "beta_tips_dummy", "u_tips", "u_age", "u_period", "eta1", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
class(fit) <- "naomi_fit"  # this is hacky...
fit <- sample_tmb(fit, random_only=FALSE)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
df <- data.frame(est = summary(fit$sdreport)[,1], id = rownames(summary(fit$sdreport)))
fit$sdreport
df <- data.frame(est = summary(fit$sdreport)[,1], id = rownames(summary(fit$sdreport)))
df %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(df, id == "beta_tips_dummy")$est),
nat = est*exp( -3.2564308) + dummy,
trans = exp(est*exp( -3.2564308) + dummy),
)
foo %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans)) +
geom_point()+
geom_line()
foo <- df %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(df, id == "beta_tips_dummy")$est),
nat = est*exp( -3.2564308) + dummy,
trans = exp(est*exp( -3.2564308) + dummy),
)
foo %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans)) +
geom_point()+
geom_line()
df
df <- readRDS("presentations/2020_04 UNPD/unpd_df.rds")
df$tips$mwi
foo
df$tips$mwi <- foo
saveRDS(df, "presentations/2020_04 UNPD/unpd_df.rds")
df$tips %>% bind_rows(.id="iso") %>% filter(id < 11) %>% ggplot(aes(x=id, y=trans, group=iso, color=iso)) + geom_point() + geom_line()
iso3_current <- "ZWE"
exc <- ""
##sorry..
list2env(make_areas_population(iso3_current, naomi_data_path, full = FALSE), globalenv())
asfr <- get_asfr_pred_df(iso3_current, 2, project = FALSE) %>%
filter(survtype == "DHS")
mf <- make_model_frames(iso3_current, population, asfr, mics_asfr = NULL, exclude_districts = exc, project=FALSE)
Z_spatial <- sparse.model.matrix(~0 + area_id, mf$mf_model)
Z_age <- sparse.model.matrix(~0 + age_group, mf$mf_model)
Z_period <- sparse.model.matrix(~0 + period, mf$mf_model)
M_obs <- sparse.model.matrix(~0 + idx, mf$dist$obs)
Z_tips <- sparse.model.matrix(~0 + tips_f, mf$dist$obs)
X_tips_dummy <- model.matrix(~0 + tips_dummy, mf$dist$obs)
R_spatial <- make_adjacency_matrix(iso3_current, areas_long, boundaries, exclude_districts = exc, level=5)
R_spatial <- make_adjacency_matrix(iso3_current, areas_long, boundaries, exclude_districts = exc, level=2)
R_tips <- make_rw_structure_matrix(ncol(Z_tips), 1, TRUE)
R_age <- make_rw_structure_matrix(ncol(Z_age), 1, TRUE)
R_period <- make_rw_structure_matrix(ncol(Z_period), 2, TRUE)
# dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
ar1_phi_age <- 0.99
ar1_phi_period <- 0.99
data <- list(
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
R_spatial = R_spatial,
ar1_phi_age = ar1_phi_age,
ar1_phi_period = ar1_phi_period,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population,
A_out = mf$out$A_out
)
par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# beta_tips_dummy_mics = rep(0, ncol(X_tips_dummy_mics)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "beta_tips_dummy", "u_tips", "u_age", "u_period", "eta1", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
class(fit) <- "naomi_fit"  # this is hacky...
fit <- sample_tmb(fit, random_only=FALSE)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
int <- data.frame(est = summary(fit$sdreport)[,1], id = rownames(summary(fit$sdreport)))
filter(int, id == "beta_tips_dummy")$est
fit$sdreport
foo <- int %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(int, id == "beta_tips_dummy")$est),
nat = est*exp( -4.0677351) + dummy,
trans = exp(est*exp( -4.0677351) + dummy),
)
foo %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans)) +
geom_point()+
geom_line()
View(fit)
fit$obj$report()$lambda_out
length(fit$obj$report()$lambda_out)
View(mf)
int <- data.frame(est = summary(fit$sdreport)[,1], id = rownames(summary(fit$sdreport)))
filter(int, id == "beta_tips_dummy")$est
fit$sdreport
foo <- int %>%
filter(id == "u_tips") %>%
mutate(id = row_number()-1,
dummy = ifelse(id<6, 0, filter(int, id == "beta_tips_dummy")$est),
nat = est*exp( -4.0677351) + dummy,
trans = exp(est*exp( -4.0677351) + dummy),
)
foo %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans)) +
geom_point()+
geom_line()
df$tips$zwe <- foo
saveRDS(df, "presentations/2020_04 UNPD/unpd_df.rds")
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(here)
library(sf)
library(devtools)
library(extrafont)
devtools::load_all("~/Documents/GitHub/naomi")
source(here("R/inputs.R"))
source(here("R/fertility_funs.R"))
list2env(make_areas_population("ZWE", "~/Documents/GitHub/naomi-data", full = FALSE), globalenv())
df <- readRDS(here("presentations/2020_04 UNPD/unpd_df.rds"))
loadfonts()
df$tips %>%
bind_rows(.id="iso") %>%
filter(id < 11) %>%
ggplot(aes(x=id, y=trans, group=iso, color=iso)) +
geom_point() +
geom_line()
library(TMB)
library(INLA)
library(tidyverse)
library(abind)
library(sf)
library(spdep)
library(Matrix)
library(countrycode)
library(haven)
library(survival)
library(parallel)
library(demogsurv)
devtools::load_all("~/Documents/GitHub/naomi")
# library(naomi)
library(here)
naomi_data_path <- "~/Documents/GitHub/naomi-data"
# naomi_data_path <- "~/naomi-data"
source(here("R/inputs.R"))
source(here("R/fertility_funs.R"))
iso3_current <- "ZWE"
exc <- ""
# exc <- "MWI_5_07"
# exc <- c("TZA_3_185", "TZA_3_186", "TZA_3_187", "TZA_3_188", "TZA_3_189", "TZA_3_190", "TZA_3_191", "TZA_3_192", "TZA_3_193", "TZA_3_194", "TZA_3_195")
##sorry..
list2env(make_areas_population(iso3_current, naomi_data_path, full = FALSE), globalenv())
asfr <- get_asfr_pred_df(iso3_current, 2, project = FALSE) %>%
filter(survtype == "DHS")
mf <- make_model_frames(iso3_current, population, asfr, mics_asfr = NULL, exclude_districts = exc, project=FALSE)
Z_spatial <- sparse.model.matrix(~0 + area_id, mf$mf_model)
Z_age <- sparse.model.matrix(~0 + age_group, mf$mf_model)
Z_period <- sparse.model.matrix(~0 + period, mf$mf_model)
M_obs <- sparse.model.matrix(~0 + idx, mf$dist$obs)
Z_tips <- sparse.model.matrix(~0 + tips_f, mf$dist$obs)
X_tips_dummy <- model.matrix(~0 + tips_dummy, mf$dist$obs)
R_spatial <- make_adjacency_matrix(iso3_current, areas_long, boundaries, exclude_districts = exc, level=2)
R_tips <- make_rw_structure_matrix(ncol(Z_tips), 1, TRUE)
R_age <- make_rw_structure_matrix(ncol(Z_age), 1, TRUE)
R_period <- make_rw_structure_matrix(ncol(Z_period), 2, TRUE)
# dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
ar1_phi_age <- 0.99
ar1_phi_period <- 0.99
data <- list(
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
R_spatial = R_spatial,
ar1_phi_age = ar1_phi_age,
ar1_phi_period = ar1_phi_period,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population,
A_out = mf$out$A_out
)
par <- list(
beta_0 = 0,
beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# beta_tips_dummy_mics = rep(0, ncol(X_tips_dummy_mics)),
u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "beta_tips_dummy", "u_tips", "u_age", "u_period", "eta1", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
class(fit) <- "naomi_fit"  # this is hacky...
fit <- sample_tmb(fit, random_only=FALSE)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
mf$out$mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level == 1) %>%
# bind_rows(inla_res %>% mutate(source = "inla")) %>%
ggplot(aes(period, median, ymin = lower, ymax = upper,
fill = age_group, color = age_group)) +
geom_line() +
geom_ribbon(color = NA, alpha=0.3) +
facet_wrap(~area_id)
mf$out$mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert()
mf$out$mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level == 2) %>%
# bind_rows(inla_res %>% mutate(source = "inla")) %>%
ggplot(aes(period, median, ymin = lower, ymax = upper,
fill = age_group, color = age_group)) +
geom_line() +
geom_ribbon(color = NA, alpha=0.3) +
facet_wrap(~area_id)
mf$out$mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level == 2)
View(mf)
View(mf[["out"]][["mf_out"]])
dim(M_obs)
View(mf[["out"]][["mf_out"]])
View(population)
View(boundaries)
summary(fit$sdreport)
