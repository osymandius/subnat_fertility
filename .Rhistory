# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5)
# log_sigma_rw_tips = log(2.5),
# log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
# Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
ar1_phi_age = 0.99,
ar1_phi_period = 0.99,
# R_spatial = R_spatial,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population
# A_out = mf$out$A_out
)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5)
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "u_age", "u_period", "eta1"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
summary(fit$sdreport)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
mf$mf_model %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert()
gridExtra::grid.arrange(
data.frame(val=fit$sample$log_tau2_rw_age, source = "tmb log tau") %>%
ggplot(aes(color=source)) +
geom_density(aes(x=val)) +
geom_point(data=inla_untransformed_hyper$age %>% mutate(source = "INLA log precision"), aes(x=x, y=y)) +
labs(title="Age"),
data.frame(val=fit$sample$log_tau2_rw_period, source = "tmb log tau") %>%
ggplot(aes(color=source)) +
geom_density(aes(x=val)) +
geom_point(data=inla_untransformed_hyper$period %>% mutate(source = "INLA log precision"), aes(x=x, y=y)) +
labs(title="Period"),
# data.frame(val=fit$sample$log_tau2_spatial, source = "tmb log sigma") %>%
#   ggplot(aes(color=source)) +
#   geom_density(aes(x=val)) +
#   geom_point(data=inla_untransformed_hyper$district %>% mutate(source = "INLA log precision"), aes(x=x, y=y)) +
#   labs(title="Spatial"),
#
# data.frame(val=fit$sample$logit_spatial_rho, source = "tmb logit rho") %>%
#   ggplot(aes(color=source)) +
#   geom_density(aes(x=val)) +
#   geom_point(data=inla_untransformed_hyper$district_phi %>% mutate(source = "INLA logit phi"), aes(x=x, y=y)) +
#   labs(title="Rho (tmb), phi (INLA"),
#
# data.frame(val=fit$sample$log_tau2_rw_tips, source = "tmb log tau") %>%
#   ggplot(aes(color=source)) +
#   geom_density(aes(x=val)) +
#   geom_point(data=inla_untransformed_hyper$tips %>% mutate(source = "INLA log precison"), aes(x=x, y=y)) +
#   labs(title="TIPS"),
data.frame(val=fit$sample$log_tau2_eta1, source = "tmb log tau") %>%
ggplot(aes(color=source)) +
geom_density(aes(x=val)) +
geom_point(data=inla_untransformed_hyper$eta1 %>% mutate(source = "INLA log precison"), aes(x=x, y=y)) +
labs(title="Eta1")
)
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
# Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
ar1_phi_age = 0.99,
ar1_phi_period = 0.99,
# R_spatial = R_spatial,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population
# A_out = mf$out$A_out
)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
b/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
# Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
ar1_phi_age = 0.99,
ar1_phi_period = 0.99,
# R_spatial = R_spatial,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population
# A_out = mf$out$A_out
)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "u_age", "u_period", "eta1"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
summary(fit$sdreport)
qtls <- apply(fit$sample$lambda, 1, quantile, c(0.025, 0.5, 0.975))
fit$obj$report()$eta1
fit$obj$report()$eta1_v
hist(fit$obj$report()$eta1_v)
rnorm(1000, 0, 0.15)
hist(rnorm(1000, 0, 0.15))
inla.doc(rw2)
inla.doc("bym2")
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
View(mf)
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
# Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
ar1_phi_age = 0.99,
ar1_phi_period = 0.99,
# R_spatial = R_spatial,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population
# A_out = mf$out$A_out
)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "u_age", "u_period", "eta1"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_mics = M_obs_mics,
# X_tips_dummy_mics = X_tips_dummy_mics,
# Z_tips_mics = Z_tips_mics,
# births_obs_mics = mf$mics$obs$births,
# log_offset_mics = log(mf$mics$obs$pys),
# A_mics = mf$mics$A_mics,
X_tips_dummy = X_tips_dummy,
Z_tips = Z_tips,
Z_age = Z_age,
Z_period = Z_period,
# Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf$mf_model),
Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf$mf_model),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf$mf_model),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf$mf_model),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
ar1_phi_age = 0.99,
ar1_phi_period = 0.99,
# R_spatial = R_spatial,
log_offset = log(mf$dist$obs$pys),
births_obs = mf$dist$obs$births,
pop = mf$mf_model$population
# A_out = mf$out$A_out
)
par <- list(
# beta_mf = rep(0, ncol(X_mf)),
beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
# u_spatial_str = rep(0, ncol(Z_spatial)),
# u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_eta1 = log(2.5)
# log_prec_rw_period = 4,
# log_prec_rw_age = 4,
# log_prec_rw_tips = 4,
# log_prec_eta1 = log(2.5),
# log_sigma_spatial = log(2.5),
# logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_0", "u_age", "u_period", "eta1"),
hessian = FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
summary(fit$sdreport)
mf$mf_model %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb")
dhs_iso3 <- dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
mutate(iso3 = countrycode(CountryName, "country.name", "iso3c"),
iso3 = ifelse(CountryName == "Eswatini", "SWZ", iso3))
clusters <- readRDS(here("input_data/clusters_2019_11_21.rds")) %>%
mutate(iso3 = survey_id) %>%
separate(col="iso3", into="iso3", sep=3) %>%
left_join(dhs_iso3 %>% select(-CountryName), by="iso3") %>%
separate(survey_id, into=c(NA, "surv"), sep=3, remove=FALSE) %>%
mutate(DHS_survey_id = paste0(DHS_CountryCode, surv)) %>%
separate(surv, into=c(NA, "SurveyType"), sep=-3) %>%
filter(iso3 == iso3_current, DHS_CountryCode != "OS") %>%
filter(!survey_id %in% c("MOZ2009AIS", "TZA2003AIS", "UGA2011AIS"))  %>%
filter(survey_id == "ZMB2013DHS")
## Get surveys for which we have clusters. Split into country list.
surveys <- dhs_surveys(surveyIds = unique(clusters$DHS_survey_id)) %>%
left_join(clusters %>%
select(c(DHS_survey_id, survey_id, iso3)) %>%
distinct,
by=c("SurveyId" = "DHS_survey_id")) %>%
filter(!SurveyId %in% c("MZ2009AIS", "TZ2003AIS", "UG2011AIS"),
iso3 == iso3_current
)
library(rdhs)
## Get surveys for which we have clusters. Split into country list.
surveys <- dhs_surveys(surveyIds = unique(clusters$DHS_survey_id)) %>%
left_join(clusters %>%
select(c(DHS_survey_id, survey_id, iso3)) %>%
distinct,
by=c("SurveyId" = "DHS_survey_id")) %>%
filter(!SurveyId %in% c("MZ2009AIS", "TZ2003AIS", "UG2011AIS"),
iso3 == iso3_current
)
set_rdhs_config(email="o.stevens@imperial.ac.uk", project="Subnational fertility", config_path = "~/.rdhs.json", timeout=100)
install.packages("rdhs")
install.packages("rdhs")
