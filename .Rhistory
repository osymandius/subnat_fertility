pred[c("births", "pys")] <- NULL
} else if(varmethod == "lin") {
des <- survey::svydesign(ids=clusters, strata=strata, data=aggr, weights=~1)
class(des) <- c("svypyears", class(des))
## fit model
f <- if(length(levels(aggr$byf)) == 1)
event ~ offset(log(pyears))
else
event ~ -1 + byf + offset(log(pyears))
mod <- survey::svyglm(f, des, family=quasipoisson)
## prediction for all factor levels that appear
pred$pyears <- 1
asfr <- predict(mod, pred, type="response", vcov=TRUE)
v <- vcov(asfr)
dimnames(v) <- list(pred$byf, pred$byf)
pred$asfr <- as.numeric(asfr)
pred$se_asfr <- sqrt(diag(v))
pred[c("byf", "pyears")] <- NULL
attr(pred, "var") <- v
} else if(varmethod %in% c("jkn", "jk1")) {
## Convert to array with events and PYs for each cluster
## reshape2::acast is MUCH faster than stats::reshape
events_clust <- reshape2::acast(aggr, update(clusters, byf ~ .), value.var="event")
pyears_clust <- reshape2::acast(aggr, update(clusters, byf ~ .), value.var="pyears")
if(varmethod == "jkn"){
aggr$strataid <- as.integer(interaction(aggr[all.vars(strata)], drop=TRUE))
strataid <- drop(reshape2::acast(unique(aggr[c(all.vars(clusters), "strataid")]),
update(clusters,  1 ~ .), value.var="strataid"))
} else
strataid <- NULL
estdf <- jackknife(events_clust, pyears_clust, strataid)
pred$asfr <- estdf$est
pred$se_asfr <- estdf$se
attr(pred, "var") <- vcov(estdf)
pred$byf <- NULL
if(clustcounts){
attr(pred, "events_clust") <- events_clust
attr(pred, "pyears_clust") <- pyears_clust
attr(pred, "strataid") <- strataid
}
} else
stop(paste0("varmethod = \"", varmethod, "\" is not recognized."))
rownames(pred) <- NULL
return(pred)
}
set_rdhs_config(email="o.stevens@imperial.ac.uk", project="Subnational fertility", config_path = "~/.rdhs.json")
##+ datasets
surveys <- dhs_surveys(countryIds = "MW", surveyYearStart=1995)
ird <- dhs_datasets(fileType = "IR", fileFormat = "flat", surveyIds = surveys$SurveyId)
ird$path <- unlist(get_datasets(ird))
#
#
ir <- lapply(ird$path, readRDS) %>%
Map(data.frame,
surveyid = surveys$SurveyId,
country = surveys$CountryName,
survyear = surveys$SurveyYear,
survtype = surveys$SurveyType,
.,
stringsAsFactors = FALSE)
geo_2000_dhs <- rdhs::get_datasets("MWGE43FL.zip")[[1]] %>% readRDS %>% st_as_sf
geo_2000_dhs <- st_join(geo_2000_dhs, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2000DHS"]] <- ir[["MW2000DHS"]] %>%
left_join(geo_2000_dhs, by = c("v001" = "DHSCLUST"))
ir[["MW2004DHS"]] <- ir[["MW2004DHS"]] %>%
mutate(district = as_factor(sdist2) %>%
sub("nkhota kota", "nkhotakota", .) %>%
str_to_title)
ir[["MW2010DHS"]] <- ir[["MW2010DHS"]] %>%
left_join(
data.frame("distcode" = attr(ir[["MW2010DHS"]]$sdistrict, "labels"), "district" = names(attr(ir[["MW2010DHS"]]$sdistrict, "labels")) %>%
sub("nkhota kota", "nkhotakota", .) %>%
sub("nkhatabay", "nkhata bay", .) %>%
str_to_title()
),
by = c("sdistrict" = "distcode")
) %>%
mutate(district = as.character(district))
ir[["MW2015DHS"]] <- ir[["MW2015DHS"]] %>%
mutate(district = sub("(.*) - (.*)", "\\1", as_factor(v022)),
district = fct_recode(district,
"nkhotakota" = "nkhota kota",
"nkhata bay" = "nkhatabay") %>%
str_to_title)
geo_2012_mis<- rdhs::get_datasets("MWGE6AFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2012_mis <- st_join(geo_2012_mis, sh32, join = st_intersects, suffix = c("", "_sh32")) %>%
type.convert()  ## Check you haven't fucked this factor conversion up like last time.
ir[["MW2012MIS"]] <- ir[["MW2012MIS"]] %>%
left_join(geo_2012_mis, by = c("v001" = "DHSCLUST"))
geo_2014_mis<- rdhs::get_datasets("MWGE71FL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2014_mis <- st_join(geo_2014_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2014MIS"]] <- ir[["MW2014MIS"]] %>%
left_join(geo_2014_mis, by = c("v001" = "DHSCLUST"))
geo_2017_mis<- rdhs::get_datasets("MWGE7IFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2017_mis <- st_join(geo_2017_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2017MIS"]] <- ir[["MW2017MIS"]] %>%
left_join(geo_2017_mis, by = c("v001" = "DHSCLUST"))
tips_surv <- list("DHS" = c(0, 7), "MIS" = c(0, 5))[surveys$SurveyType]
#            period = list(1995:2017))
#
# tfr <- tfr %>%
#   bind_rows %>%
#   type.convert %>%
#   mutate(v025 = factor(v025, levels= c(1,2), labels = c("Urban", "Rural"))) %>%
#   filter(period <= survyear) %>%
#   mutate(lower = tfr - qnorm(0.975) * se_tfr,
#          upper = tfr + qnorm(0.975) * se_tfr)
#
asfr <- Map(calc_asfr1, ir,
by = list(~surveyid + country + survyear + district),
tips = tips_surv,
agegr= list(15:50),
period = list(1995:2017),
counts = TRUE)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/testing", dependencies=TRUE)
library(tidyverse)
library(magrittr)
library(rdhs)
library(demogsurv)
library(INLA)
library(reshape2)
library(survival)
library(sf)
library(spdep)
library(INLA)
install.packages("INLA")
sessionInfo()
library(INLA)
remove.packages("INLA")
install.packages("INLA")
library(countrycode)
library(tidyverse)
library(magrittr)
library(rdhs)
library(demogsurv)
library(INLA)
library(reshape2)
library(survival)
library(sf)
library(spdep)
library(parallel)
devtools::install_github("tidyverse/tidyr")
setwd("~/Documents/GitHub/subnat_fertility")
# set wd to home directory
setwd("/Volumes/HOMES/os210")
options(didehpc.cluster = "fi--didemrchnb", didehpc.username = "os210") # specify which cluster (I think this is the biggest)
didehpc::didehpc_config() # check config
didehpc::web_login() # check login
grp$status() # check the status of your jobs
obj$task_list() # lists all tasks waiting for cluster
# list your source files / functions
sources <- c("fertility_funs.R")
packages <- c("INLA", "countrycode", "sp", "spdep", "dplyr", "magrittr")
# set contexts (if your code uses any specific packages make a list of these and specify here)
ctx <- context::context_save("contexts", packages=packages,  package_sources = provisionr::package_sources(repos="https://inla.r-inla-download.org/R/stable"), sources=sources)
# configure and set no. of cores needed per job (you shouldn't need more than 1)
config <- didehpc::didehpc_config(cores=4)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
# set contexts (if your code uses any specific packages make a list of these and specify here)
ctx <- context::context_save("contexts", packages=packages,  package_sources = provisionr::package_sources(repos="https://inla.r-inla-download.org/R/stable"), sources=sources)
# configure and set no. of cores needed per job (you shouldn't need more than 1)
config <- didehpc::didehpc_config(cores=4)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
library(drat)
library(didehpc)
drat:::add("mrc-ide")
# set wd to home directory
setwd("/Volumes/HOMES/os210")
options(didehpc.cluster = "fi--didemrchnb", didehpc.username = "os210") # specify which cluster (I think this is the biggest)
didehpc::didehpc_config() # check config
didehpc::web_login() # check login
# list your source files / functions
sources <- c("fertility_funs.R")
packages <- c("INLA", "countrycode", "sp", "spdep", "dplyr", "magrittr")
# set contexts (if your code uses any specific packages make a list of these and specify here)
ctx <- context::context_save("contexts", packages=packages,  package_sources = provisionr::package_sources(repos="https://inla.r-inla-download.org/R/stable"), sources=sources)
# configure and set no. of cores needed per job (you shouldn't need more than 1)
config <- didehpc::didehpc_config(cores=4)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
obj$task_list()
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
id <- c("e919ff9499b1a6cb664abbbe8a123b7f", "2f3079c0e7db356d5d31230ac6cd99b9", "068065daaeefd8cc3ad542ed80a72fe1", "a68dfbe688a36854463140f762896dfc")
# set contexts (if your code uses any specific packages make a list of these and specify here)
ctx <- context::context_save("contexts", packages=packages,  package_sources = provisionr::package_sources(repos="https://inla.r-inla-download.org/R/stable"), sources=sources)
# configure and set no. of cores needed per job (you shouldn't need more than 1)
config <- didehpc::didehpc_config(cores=4)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
?pivot_wider
library(tidyverse)
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
areas <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds")
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015) %>%
group_by(iso3, parent_area_id) %>%
mutate(parent_pop = sum(population)) %>%
ungroup() %>%
group_by(iso3, age, parent_area_id) %>%
mutate(parent_pop_age = sum(population))
setwd("~/Documents/GitHub/subnat_fertility")
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
areas <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds")
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015) %>%
group_by(iso3, parent_area_id) %>%
mutate(parent_pop = sum(population)) %>%
ungroup() %>%
group_by(iso3, age, parent_area_id) %>%
mutate(parent_pop_age = sum(population))
View(pop_areas)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
pivot_wider(names_from = level, values_from = population)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015) %>%
group_by(iso3, parent_area_id) %>%
mutate(parent_pop = sum(population)) %>%
ungroup() %>%
group_by(iso3, age, parent_area_id) %>%
mutate(parent_pop_age = sum(population))
areas_long <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds")
areas_wide <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_wide.rds")
View(areas_wide)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015) %>%
group_by(iso3, parent_area_id) %>%
mutate(parent_pop = sum(population),
parent_area_level = level - 1)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015) %>%
group_by(iso3, parent_area_id) %>%
mutate(parent_area_level = level - 1,
parent_pop = sum(population))
View(areas_wide)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(year == 2015)
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
View(worldpop)
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f",
level=1)
worldpop %>%
filter(level==1)
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level"))
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(level==1)
View(pop_areas)
pop_areas_1 <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(level==1) %>%
group_by(iso3, parent_area_id, year) %>%
mutate(parent_area_level = level - 1,
parent_pop = sum(population))
View(pop_areas_1)
pop_areas_1 <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(level==1) %>%
group_by(iso3, parent_area_id, year) %>%
mutate(parent_area_level = level - 1,
parent_pop = sum(population))
View(pop_areas_1)
pop_areas_1 <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(level==1) %>%
group_by(iso3, parent_area_id, year) %>%
mutate(parent_area_level = level - 1,
parent_pop = sum(population)) %>%
ungroup() %>%
group_by(iso3, age, parent_area_id) %>%
mutate(parent_pop_age = sum(population))
pop_areas_1 <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level")) %>%
filter(level==1) %>%
group_by(iso3, parent_area_id, age, year) %>%
mutate(parent_area_level = level - 1,
parent_pop_age = sum(population))
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE)
library(splistackshape)
install.packages("splistackshape")
install.packages("splitstackshape")
library(splitstackshape)
?cSplit
worldpop %>%
cSplit(id, sep=",")
worldpop %>%
cSplit(., id, sep=",")
cSplit(worldpop, worldpop$id, sep=".")
worldpop %>
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, extra = "merge", fill = "left"))
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, extra = "merge", fill = "left"))
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, extra = "merge", fill = "right")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, fill = "right")
?separate
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=".", remove=FALSE, fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="([\.{1,}])", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="\.{1,}", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=\.{1,}, remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep=[\.{1,}], remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="\.{1,}", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="/\.{1,}", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="(\.{1,})", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="\\.{1,}", remove=FALSE, extra = "merge", fill = "left")
worldpop %>%
separate(id, into=c("id0", "id1", "id2", "id3", "id4", "id5"), sep="\\.{1,}", remove=FALSE, extra = "merge", fill = "right")
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
pop_areas <- worldpop %>%
left_join(areas, by=c("iso3", "name" = "area_name", "id" = "area_id", "level" = "area_level"))
areas_wide <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_wide.rds")
pop_areas <- worldpop %>%
left_join(areas_wide, by=c("iso3", "name" = "area_name", "id" = "area_id"))
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
pop_areas <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id"))
View(pop_areas)
library(drat)
library(didehpc)
# set wd to home directory
setwd("/Volumes/HOMES/os210")
options(didehpc.cluster = "fi--didemrchnb", didehpc.username = "os210") # specify which cluster (I think this is the biggest)
didehpc::didehpc_config() # check config
didehpc::web_login() # check login
# list your source files / functions
sources <- c("fertility_funs.R")
packages <- c("INLA", "countrycode", "sp", "spdep", "dplyr", "magrittr")
# set contexts (if your code uses any specific packages make a list of these and specify here)
ctx <- context::context_save("contexts", packages=packages,  package_sources = provisionr::package_sources(repos="https://inla.r-inla-download.org/R/stable"), sources=sources)
# configure and set no. of cores needed per job (you shouldn't need more than 1)
config <- didehpc::didehpc_config(cores=4)
# build a queue
obj <- didehpc::queue_didehpc(ctx, config=config)
areas_wide <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_wide.rds")
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
View(areas_wide)
setwd("~/Documents/GitHub/subnat_fertility")
worldpop <- read_csv("WorldPop_agesex.csv", col_types = cols(X1 = col_skip(), X = col_skip(), sex = col_character())) %>%
filter(sex=="f")
areas_long <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds")
View(areas_wide)
View(areas_long)
pop_areas <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id", "level" = "area_level"))
View(pop_areas)
admin_level <- 1
pop_areas <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id", "level" = "area_level")) %>%
group_by(iso3) %>%
mutate(admin_pop = sum(pop[level==admin_level]))
pop_areas <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id", "level" = "area_level")) %>%
group_by(iso3) %>%
mutate(admin_pop = sum(population[level==admin_level]))
pop_areas <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id", "level" = "area_level")) %>%
filter(level == admin_level)
pop_areas_long <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id", "level" = "area_level"))
pop_areas_wide <- worldpop %>%
left_join(areas_long, by=c("iso3", "id" = "area_id"))
View(pop_areas_long)
View(pop_areas_wide)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id"))
pop_areas_wide %>%
group_by(iso3, id1) %>%
mutate(admin_pop = sum(population))
foo <- pop_areas_wide %>%
group_by(iso3, id1) %>%
mutate(admin_pop = sum(population))
View(foo)
foo <- pop_areas_wide %>%
group_by(iso3, id1, age) %>%
mutate(admin_pop = sum(population))
foo <- pop_areas_wide %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population))
areas_wide <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_wide.rds") %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"))
View(areas_wide)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
)
foo <- pop_areas_wide %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population))
View(foo)
foo <- pop_areas_wide %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population)/2)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, paste0(id, admin_level), age, year) %>%
mutate(admin_pop = sum(population)/2)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population)/2)
View(pop_areas_wide)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, paste0("id", admin_level), age, year) %>%
mutate(admin_pop = sum(population)/2)
paste0("id", admin_level)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population)/2)
?noquote
noquote(paste0("id", admin_level))
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, noquote(paste0("id", admin_level)), age, year) %>%
mutate(admin_pop = sum(population)/2)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3,
name1 = ifelse(level==1, name, name1),
id1 = ifelse(level==1, id, id1)
) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population)/2)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population)/2)
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population))
pop_areas_wide <- worldpop %>%
left_join(areas_wide, by=c("iso3", "id" = "area_id")) %>%
mutate(name0 = countrycode(iso3, "iso3c", "country.name"),
id0 = iso3) %>%
group_by(iso3, id1, age, year) %>%
mutate(admin_pop = sum(population),
admin_pop_ratio = population/admin_pop)
View(areas_long)
areas_long %>% pivot_wider(names_from=area_level, values_from=c(area_id))
areas_long %>% pivot_wider(names_from=area_level, values_from=c(area_id, area_name, parent_area_id))
areas_long %>% pivot_wider(names_from=area_level, values_from=area_name)
