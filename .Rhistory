library(TMB)
library(tidyverse)
library(abind)
library(sf)
library(spdep)
library(Matrix)
setwd("~/GitHub/subnat_fertility/")
source("R/inputs.R")
list.files("~/GitHub/naomi/")
list.files("~/GitHub/naomi/R")
list.files("~/GitHub/naomi/R", full.names = TRUE)
lapply(list.files("~/GitHub/naomi/R", full.names = TRUE), source)
iso3_current <- "ZWE"
list2env(make_areas_population(iso3_current, "~/GitHub/naomi-data/"), globalenv())
iso3_current <- "ZWE"
list2env(make_areas_population(iso3_current, "~/GitHub/naomi-data/"), globalenv())
asfr <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", 2, ".rds"))
population <- population %>%
filter(period == min(period))
##############
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", unique(areas_long$area_level[areas_long$naomi_level == TRUE]), ".rds"))
})
getwd()
##############
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", unique(areas_long$area_level[areas_long$naomi_level == TRUE]), ".rds"))
})
unique(areas_long$area_level[areas_long$naomi_level == TRUE])
list2env(make_areas_population(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), "~/GitHub/naomi-data/"), globalenv())
##############
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", unique(areas_long$area_level[areas_long$naomi_level == TRUE]), ".rds"))
})
names(dat) <- c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE")
formula <- births ~ f(id.age_group, model="rw1") + f(id.period, model="rw2") + f(id.age_group2, model = "rw1", group = id.period, control.group = list(model = "ar1"))
Map(function(x, y) {
formula <- births ~ f(id.age_group, model="rw1") + f(id.period, model="rw2") + f(id.age_group2, model = "rw1", group = id.period, control.group = list(model = "rw2"))
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
formula <- births ~ f(id.age_group, model="rw1") + f(id.period, model="rw2") + tips_dummy + f(id.tips, model="rw1")
source("R/fertility_funs.R")
Map(function(x, y) {
formula <- births ~ f(id.age_group, model="rw1") + f(id.period, model="rw2") + tips_dummy + f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
library(INLA)
Map(function(x, y) {
formula <- births ~ f(id.age_group, model="rw1") + f(id.period, model="rw2") + tips_dummy + f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
f(id.age_group2, model = "rw1", group = id.period, control.group = list(model = "rw2")) +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
f(id.age_group2, model = "rw1", group = id.period, control.group = list(model = "rw2"))
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
##############
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin0.rds"))
})
names(dat) <- c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE")
Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
f(id.age_group2, model = "rw1", group = id.period, control.group = list(model = "rw2")) +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
install.packages(c("countrycode", "geojsonsf", "rdhs"))
Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
mod_list <- Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
# saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
get_mod_results_test(mod_list[[1]], dat[[1]])
debugonce(get_mod_results_test)
get_mod_results_test(mod_list[[1]], dat[[1]])
View(asfr_pred_country_subnat)
debugonce(get_mod_results_test)
get_mod_results_test(mod_list[[1]], dat[[1]])
source("R/fertility_funs.R")
get_mod_results_test(mod_list[[1]], dat[[1]])
debugonce(get_mod_results_test)
get_mod_results_test(mod_list[[1]], dat[[1]])
colnames(dat[[1]])
debugonce(get_mod_results_test)
get_mod_results_test(mod_list[[1]], dat[[1]])
sapply(samples.effect, cbind) %>%
data.frame %>%
mutate(id = 1:nrow(.))
source("R/fertility_funs.R")
debugonce(get_mod_results_test)
get_mod_results_test(mod_list[[1]], dat[[1]])
View(samples_ident)
source("R/fertility_funs.R")
get_mod_results_test(mod_list[[1]], dat[[1]])
Map(function(x, y,  z) {
res <- get_mod_results_test(z, y)
saveRDS(res, paste0("countries/", x, "/mods/", x, "_nat_res.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat, z=mod_list)
res_list <- Map(function(x, y,  z) {
res <- get_mod_results_test(z, y)
# saveRDS(res, paste0("countries/", x, "/mods/", x, "_nat_res.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat, z=mod_list)
View(res_list)
res_list %>%
bind_rows %>%
ggplot(aes(x=period, y=median, color=agegr, group=agegr)) +
geom_line() +
facet_wrap(~iso3)
res_list %>%
bind_rows %>%
ggplot(aes(x=period, y=median, color=age_group, group=age_group)) +
geom_line() +
facet_wrap(~iso3)
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
dat <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin0.rds")) %>%
filter(period<2016)
return(dat)
})
names(dat) <- c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE")
mod_list <- Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
# saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
Map(function(x, y) {
formula <- births ~
f(id.age_group, model="rw1") +
f(id.period, model="rw2") +
tips_dummy +
f(id.tips, model="rw1")
mod <- run_mod_nat(formula, y)
saveRDS(mod, paste0("countries/", x, "/mods/", x, "_nat_mod.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat)
res_list <- Map(function(x, y,  z) {
res <- get_mod_results_test(z, y)
# saveRDS(res, paste0("countries/", x, "/mods/", x, "_nat_res.rds"))
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat, z=mod_list)
res_list <- Map(function(x, y,  z) {
res <- get_mod_results_test(z, y)
saveRDS(res, paste0("countries/", x, "/mods/", x, "_nat_res.rds"))
return(res)
}, x=c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), y=dat, z=mod_list)
res_list %>%
bind_rows %>%
ggplot(aes(x=period, y=median, color=age_group, group=age_group)) +
geom_line() +
facet_wrap(~iso3)
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
dat <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin1.rds")) %>%
filter(period<2016)
return(dat)
})
dat <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin0.rds")) %>%
filter(period<2016)
dat <- lapply(c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE"), function(iso3_current) {
areas_long <- filter(areas_long, iso3==iso3_current)
dat <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin0.rds")) %>%
filter(period<2016)
return(dat)
})
mod_list$LSO$summary.random
mod_list$LSO$summary.random %>%
lapply("[[", mean)
mod_list$LSO$summary.random %>%
lapply("[[", "mean")
mod_list$LSO$summary.random %>%
lapply(arrange, "ID")
mod_list$LSO$summary.random %>%
lapply(arrange, ID)
mod_list$LSO$summary.random %>%
lapply(function(x) mutate(x, ID = as.integer(ID)))
mod_list$LSO$summary.random %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID)
mod_list$LSO$summary.random %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean")
mod_list$LSO$summary.random %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
View(mod_list)
lapply(mod_list, "[[", "summary.random") %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
lapply(mod_list, "[[", "summary.random", function(x){
x %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
})
lapply(mod_list, "[[", "summary.random"
)
r_list <- lapply(mod_list, "[[", "summary.random")  , function(x){
x %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
})
r_list <- lapply(mod_list, "[[", "summary.random")
lapply(r_list, function(x){
x %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
})
r_list <- lapply(mod_list, "[[", "summary.random") %>%
lapply(function(x){
x %>%
lapply(function(x) mutate(x, ID = as.integer(ID))) %>%
lapply(arrange, ID) %>%
lapply("[[", "mean") %>%
lapply(exp)
})
View(r_list)
View(dat)
names(dat) <- c("LSO", "MOZ", "MWI", "NAM", "TZA", "UGA", "ZMB", "ZWE")
View(dat)
iso3_current <- "ZWE"
asfr <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", 0, ".rds"))
population <- population %>%
filter(period == min(period))
View(population)
list2env(make_areas_population("ZWE", "~/GitHub/naomi-data/"), globalenv())
asfr <- readRDS(paste0("countries/", iso3_current, "/data/", iso3_current, "_asfr_admin", 0, ".rds"))
population <- population %>%
filter(period == min(period))
View(population)
population <- population %>%
group_by(calendar_quarter, sex, age_group) %>%
summarise(population = sum(population)) %>%
mutate(area_id = "ZWE") %>%
ungroup
population <- population %>%
group_by(period, sex, age_group) %>%
summarise(population = sum(population)) %>%
mutate(area_id = "ZWE") %>%
ungroup
mf <- crossing(period = factor(1995:2015),
age_group = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"),
area_id = filter(areas_long, iso3 == iso3_current, area_level == 0)$area_id) %>%
left_join(population %>%
mutate(year = year_labels(calendar_quarter_to_quarter_id(calendar_quarter))) %>%
filter(sex == "female") %>%
select(area_id, age_group, population)
) %>%
mutate(area_id = factor(area_id, levels = filter(areas_long, iso3 == iso3_current,  area_level == 0)$area_id),
age_group = factor(age_group, levels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"))
) %>%
arrange(period, area_id, age_group) %>%
mutate(idx = factor(row_number()),
# id.interaction = factor(group_indices(., age_group, period, area_id))
id.interaction1 = factor(group_indices(., age_group, period)),
id.interaction2 = factor(group_indices(., period, area_id)),
id.interaction3 = factor(group_indices(., age_group, area_id))
)
crossing(period = factor(1995:2015),
age_group = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"),
area_id = filter(areas_long, iso3 == iso3_current, area_level == 0)$area_id) %>%
left_join(population %>%
filter(sex == "female") %>%
select(area_id, age_group, population)
) %>%
mutate(area_id = factor(area_id, levels = filter(areas_long, iso3 == iso3_current,  area_level == 0)$area_id),
age_group = factor(age_group, levels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"))
)
crossing(period = factor(1995:2015),
age_group = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"),
area_id = filter(areas_long, iso3 == iso3_current, area_level == 0)$area_id) %>%
left_join(population %>%
filter(sex == "female") %>%
select(area_id, age_group, population)
) %>%
mutate(area_id = factor(area_id, levels = filter(areas_long, iso3 == iso3_current,  area_level == 0)$area_id),
age_group = factor(age_group, levels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"))
) %>%
arrange(period, area_id, age_group)
mf <- crossing(period = factor(1995:2015),
age_group = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"),
area_id = filter(areas_long, iso3 == iso3_current, area_level == 0)$area_id) %>%
left_join(population %>%
filter(sex == "female") %>%
select(area_id, age_group, population)
) %>%
mutate(area_id = factor(area_id, levels = filter(areas_long, iso3 == iso3_current,  area_level == 0)$area_id),
age_group = factor(age_group, levels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"))
) %>%
arrange(period, area_id, age_group) %>%
mutate(idx = factor(row_number()),
# id.interaction = factor(group_indices(., age_group, period, area_id))
id.interaction1 = factor(group_indices(., age_group, period)),
id.interaction2 = factor(group_indices(., period, area_id)),
id.interaction3 = factor(group_indices(., age_group, area_id))
)
obs <- asfr %>%
filter(!is.na(surveyid)) %>%
select(area_id, period, age_group, tips, births, pys) %>%
mutate(age_group = factor(age_group, levels(mf$age_group)),
period = factor(period)) %>%
left_join(mf, by = c("area_id", "period", "age_group")) %>%
mutate(tips_dummy = as.integer(tips > 5),
tips_f = factor(tips),
area_id = factor(area_id, levels(mf$area_id)))
# X_mf <- model.matrix(~1 + age_group + period + area_id, mf)
X_mf <- model.matrix(~1 + age_group + period, mf)
#' This has dimensions (number of observations) x (number of rows in model frame (i.e crossing of age x time x space))
#' Many more rows than mf because observations has things we need to adjust for bias (e.g. tips), but not required in model frame.
#' Column index (idx) has been joined onto obs dataframe from mf. So now each observation is labelled with the appropriate index in the mf
M_mf_obs <- Matrix::sparse.model.matrix(~0 + idx, obs)
Z_tips <- sparse.model.matrix(~0 + tips_f, obs)
#' Create precision matrix for RW1
D_tips <- diff(diag(ncol(Z_tips)), differences = 1)
Q_tips <- as(t(D_tips) %*% D_tips, "dgCMatrix")
Z_age <- sparse.model.matrix(~0 + age_group, obs)
D_age <- diff(diag(ncol(Z_age)), differences = 1)
Q_age <- t(D_age) %*% D_age
diag(Q_age) <- diag(Q_age) + 1E-6
Q_age <- as(Q_age, "dgCMatrix")
Z_period <- sparse.model.matrix(~0 + period, obs)
D_period <- diff(diag(ncol(Z_period)), differences = 2)
Q_period <- t(D_period) %*% D_period
diag(Q_period) <- diag(Q_period) + 1E-6
Q_period <- as(Q_period, "dgCMatrix")
X_tips_dummy <- model.matrix(~0 + tips_dummy, obs)
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
dyn.load(dynlib("tmb/fertility_tmb_dev"))
getwd()
library(TMB)
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
paste(getwd(), "tmb/fertility_tmb_dev.cpp")
compile("/tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
paste0(getwd(), "/tmb/fertility_tmb_dev.cpp")
compile(paste0(getwd(), "/tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
install.packages("TMB")
install.packages("TMB")
install.packages("TMB")
library(TMB)
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
getwd()
source("linreg.R")
install.packages("TMB")
install.packages("TMB")
library(TMB)
compile("tmb/fertility_tmb_dev.cpp")               # Compile the C++ file
