geo_2000_dhs <- st_join(geo_2000_dhs, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2000DHS"]] <- ir[["MW2000DHS"]] %>%
left_join(geo_2000_dhs %>%
select(DHSCLUST, district), by = c("v001" = "DHSCLUST"))
ir[["MW2004DHS"]] <- ir[["MW2004DHS"]] %>%
mutate(district = as_factor(sdist2) %>%
sub("nkhota kota", "nkhotakota", .) %>%
str_to_title)
ir[["MW2010DHS"]] <- ir[["MW2010DHS"]] %>%
left_join(
data.frame("distcode" = attr(ir[["MW2010DHS"]]$sdistrict, "labels"), "district" = names(attr(ir[["MW2010DHS"]]$sdistrict, "labels")) %>%
sub("nkhota kota", "nkhotakota", .) %>%
sub("nkhatabay", "nkhata bay", .) %>%
str_to_title()
),
by = c("sdistrict" = "distcode")
) %>%
mutate(district = as.character(district))
ir[["MW2015DHS"]] <- ir[["MW2015DHS"]] %>%
mutate(district = sub("(.*) - (.*)", "\\1", as_factor(v022)),
district = fct_recode(district,
"nkhotakota" = "nkhota kota",
"nkhata bay" = "nkhatabay") %>%
str_to_title)
geo_2012_mis<- rdhs::get_datasets("MWGE6AFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2012_mis <- st_join(geo_2012_mis, sh32, join = st_intersects, suffix = c("", "_sh32")) %>%
type.convert()  ## Check you haven't fucked this factor conversion up like last time.
ir[["MW2012MIS"]] <- ir[["MW2012MIS"]] %>%
left_join(geo_2012_mis, by = c("v001" = "DHSCLUST"))
geo_2014_mis<- rdhs::get_datasets("MWGE71FL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2014_mis <- st_join(geo_2014_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2014MIS"]] <- ir[["MW2014MIS"]] %>%
left_join(geo_2014_mis %>%
select(DHSCLUST, district), by = c("v001" = "DHSCLUST"))
geo_2017_mis<- rdhs::get_datasets("MWGE7IFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2017_mis <- st_join(geo_2017_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2017MIS"]] <- ir[["MW2017MIS"]] %>%
left_join(geo_2017_mis %>%
select(DHSCLUST, district), by = c("v001" = "DHSCLUST"))
View(ir)
ir[[1]]$geometry
View(ir)
str(ir[[1]]$district)
str(ir[[1]]$geometry)
foo <- ir[[1]] %>%
select(-geometry)
str(ir[[1]]$geometry)
ir <- lapply(ird$path, readRDS) %>%
Map(data.frame,
surveyid = surveys$SurveyId,
country = surveys$CountryName,
survyear = surveys$SurveyYear,
survtype = surveys$SurveyType,
.,
stringsAsFactors = FALSE)
geo_2000_dhs <- rdhs::get_datasets("MWGE43FL.zip")[[1]] %>% readRDS %>% st_as_sf
geo_2000_dhs <- st_join(geo_2000_dhs, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2000DHS"]] <- ir[["MW2000DHS"]] %>%
left_join(geo_2000_dhs, by = c("v001" = "DHSCLUST"))
ir[["MW2004DHS"]] <- ir[["MW2004DHS"]] %>%
mutate(district = as_factor(sdist2) %>%
sub("nkhota kota", "nkhotakota", .) %>%
str_to_title)
ir[["MW2010DHS"]] <- ir[["MW2010DHS"]] %>%
left_join(
data.frame("distcode" = attr(ir[["MW2010DHS"]]$sdistrict, "labels"), "district" = names(attr(ir[["MW2010DHS"]]$sdistrict, "labels")) %>%
sub("nkhota kota", "nkhotakota", .) %>%
sub("nkhatabay", "nkhata bay", .) %>%
str_to_title()
),
by = c("sdistrict" = "distcode")
) %>%
mutate(district = as.character(district))
ir[["MW2015DHS"]] <- ir[["MW2015DHS"]] %>%
mutate(district = sub("(.*) - (.*)", "\\1", as_factor(v022)),
district = fct_recode(district,
"nkhotakota" = "nkhota kota",
"nkhata bay" = "nkhatabay") %>%
str_to_title)
geo_2012_mis<- rdhs::get_datasets("MWGE6AFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2012_mis <- st_join(geo_2012_mis, sh32, join = st_intersects, suffix = c("", "_sh32")) %>%
type.convert()  ## Check you haven't fucked this factor conversion up like last time.
ir[["MW2012MIS"]] <- ir[["MW2012MIS"]] %>%
left_join(geo_2012_mis, by = c("v001" = "DHSCLUST"))
geo_2014_mis<- rdhs::get_datasets("MWGE71FL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2014_mis <- st_join(geo_2014_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2014MIS"]] <- ir[["MW2014MIS"]] %>%
left_join(geo_2014_mis, by = c("v001" = "DHSCLUST"))
geo_2017_mis<- rdhs::get_datasets("MWGE7IFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2017_mis <- st_join(geo_2017_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2017MIS"]] <- ir[["MW2017MIS"]] %>%
left_join(geo_2017_mis, by = c("v001" = "DHSCLUST"))
tips_surv <- list("DHS" = c(0, 7), "MIS" = c(0, 5))[surveys$SurveyType]
#            period = list(1995:2017))
#
# tfr <- tfr %>%
#   bind_rows %>%
#   type.convert %>%
#   mutate(v025 = factor(v025, levels= c(1,2), labels = c("Urban", "Rural"))) %>%
#   filter(period <= survyear) %>%
#   mutate(lower = tfr - qnorm(0.975) * se_tfr,
#          upper = tfr + qnorm(0.975) * se_tfr)
#
asfr <- Map(calc_asfr1, ir,
by = list(~surveyid + country + survyear),
tips = tips_surv,
agegr= list(15:50),
period = list(1995:2017),
counts = TRUE)
#            period = list(1995:2017))
#
# tfr <- tfr %>%
#   bind_rows %>%
#   type.convert %>%
#   mutate(v025 = factor(v025, levels= c(1,2), labels = c("Urban", "Rural"))) %>%
#   filter(period <= survyear) %>%
#   mutate(lower = tfr - qnorm(0.975) * se_tfr,
#          upper = tfr + qnorm(0.975) * se_tfr)
#
asfr <- Map(calc_asfr1, ir,
by = list(~surveyid + country + survyear + district),
tips = tips_surv,
agegr= list(15:50),
period = list(1995:2017),
counts = TRUE)
#            period = list(1995:2017))
#
# tfr <- tfr %>%
#   bind_rows %>%
#   type.convert %>%
#   mutate(v025 = factor(v025, levels= c(1,2), labels = c("Urban", "Rural"))) %>%
#   filter(period <= survyear) %>%
#   mutate(lower = tfr - qnorm(0.975) * se_tfr,
#          upper = tfr + qnorm(0.975) * se_tfr)
#
asfr <- Map(calc_asfr1, ir,
by = list(~surveyid + country + survyear + district),
tips = tips_surv,
agegr= list(15:50),
period = list(1995:2017),
counts = TRUE)
Sys.getenv(R_MAX_VSIZE)
library(tidyverse)
library(rdhs)
library(demogsurv)
library(INLA)
library(reshape2)
library(survival)
library(sf)
# setwd("~/Documents/GitHub/subnat_fertility")
# load("~/Documents/GitHub/subnat_fertility/asfr_singleage.Rda")
load("~/Documents/GitHub/naomi-dev/data/shapefile.rda")
calc_asfr1 <- function(data,
by = NULL,
agegr = NULL,
period = NULL,
cohort = NULL,
tips = c(0, 3),
clusters=~v021,
strata=~v024+v025,
id="caseid",
dob="v011",
intv = "v008",
weight= "v005",
varmethod = "none",
bvars = grep("^b3\\_[0-9]*", names(data), value=TRUE),
birth_displace = 1e-6,
origin=1900,
scale=12,
bhdata = NULL,
counts=FALSE,
clustcounts = FALSE){
data$id <- data[[id]]
data$dob <- data[[dob]]
data$intv <- data[[intv]]
data$weights <- data[[weight]] / mean(data[[weight]])
if(is.null(by))
by <- ~1
vars <- unique(unlist(lapply(c(by, strata, clusters), all.vars)))
f <- formula(paste("~", paste(vars, collapse = "+")))
mf <- model.frame(formula = f, data = data, na.action = na.pass,
id = id, weights = weights, dob = dob, intv = intv)
if(is.null(bhdata)) {
births <- reshape(model.frame(paste("~", paste(bvars, collapse="+")),
data, na.action=na.pass, id=id),
idvar="(id)", timevar="bidx",
varying=bvars, v.names="bcmc", direction="long")
} else {
if(length(bvars) > 1)
stop("If `bhdata' is provided, bvars must provide a single variable name (length(bvars) = 1)")
bhdata$id <- bhdata[[id]]
bhdata$bcmc <- bhdata[[bvars]]
births <- model.frame(~bcmc, data = bhdata, id = id)
births$bidx <- ave(births$bcmc, births$`(id)`, FUN = seq_along)
}
births <- births[!is.na(births$bcmc), ]
births$bcmc <- births$bcmc + births$bidx * birth_displace
epis <- tmerge(mf, mf, id=`(id)`, tstart=`(dob)`, tstop=`(intv)`)
epis <- tmerge(epis, births, id=`(id)`, birth = event(bcmc))
aggr <- demog_pyears(f, epis, period=period, agegr=agegr, cohort=cohort, tips=tips,
event="birth", weights="(weights)", origin=origin, scale=scale)$data
## construct interaction of all factor levels that appear
byvar <- intersect(c(all.vars(by), "agegr", "period", "cohort", "tips"),
names(aggr))
aggr$byf <- interaction(aggr[byvar], drop=TRUE)
## prediction for all factor levels that appear
pred <- data.frame(aggr[c(byvar, "byf")])[!duplicated(aggr$byf),]
pred <- pred[order(pred$byf), ]
if(counts || varmethod == "none"){
mc <- model.matrix(~-1+byf, aggr)
clong <- aggr[c("event", "pyears")]
pred[c("births", "pys")] <- t(mc) %*% as.matrix(clong)
}
if(varmethod == "none") {
pred$asfr <- pred$births / pred$pys
pred$byf <- NULL
if(!counts)
pred[c("births", "pys")] <- NULL
} else if(varmethod == "lin") {
des <- survey::svydesign(ids=clusters, strata=strata, data=aggr, weights=~1)
class(des) <- c("svypyears", class(des))
## fit model
f <- if(length(levels(aggr$byf)) == 1)
event ~ offset(log(pyears))
else
event ~ -1 + byf + offset(log(pyears))
mod <- survey::svyglm(f, des, family=quasipoisson)
## prediction for all factor levels that appear
pred$pyears <- 1
asfr <- predict(mod, pred, type="response", vcov=TRUE)
v <- vcov(asfr)
dimnames(v) <- list(pred$byf, pred$byf)
pred$asfr <- as.numeric(asfr)
pred$se_asfr <- sqrt(diag(v))
pred[c("byf", "pyears")] <- NULL
attr(pred, "var") <- v
} else if(varmethod %in% c("jkn", "jk1")) {
## Convert to array with events and PYs for each cluster
## reshape2::acast is MUCH faster than stats::reshape
events_clust <- reshape2::acast(aggr, update(clusters, byf ~ .), value.var="event")
pyears_clust <- reshape2::acast(aggr, update(clusters, byf ~ .), value.var="pyears")
if(varmethod == "jkn"){
aggr$strataid <- as.integer(interaction(aggr[all.vars(strata)], drop=TRUE))
strataid <- drop(reshape2::acast(unique(aggr[c(all.vars(clusters), "strataid")]),
update(clusters,  1 ~ .), value.var="strataid"))
} else
strataid <- NULL
estdf <- jackknife(events_clust, pyears_clust, strataid)
pred$asfr <- estdf$est
pred$se_asfr <- estdf$se
attr(pred, "var") <- vcov(estdf)
pred$byf <- NULL
if(clustcounts){
attr(pred, "events_clust") <- events_clust
attr(pred, "pyears_clust") <- pyears_clust
attr(pred, "strataid") <- strataid
}
} else
stop(paste0("varmethod = \"", varmethod, "\" is not recognized."))
rownames(pred) <- NULL
return(pred)
}
set_rdhs_config(email="o.stevens@imperial.ac.uk", project="Subnational fertility", config_path = "~/.rdhs.json")
##+ datasets
surveys <- dhs_surveys(countryIds = "MW", surveyYearStart=1995)
ird <- dhs_datasets(fileType = "IR", fileFormat = "flat", surveyIds = surveys$SurveyId)
ird$path <- unlist(get_datasets(ird))
#
#
ir <- lapply(ird$path, readRDS) %>%
Map(data.frame,
surveyid = surveys$SurveyId,
country = surveys$CountryName,
survyear = surveys$SurveyYear,
survtype = surveys$SurveyType,
.,
stringsAsFactors = FALSE)
geo_2000_dhs <- rdhs::get_datasets("MWGE43FL.zip")[[1]] %>% readRDS %>% st_as_sf
geo_2000_dhs <- st_join(geo_2000_dhs, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2000DHS"]] <- ir[["MW2000DHS"]] %>%
left_join(geo_2000_dhs, by = c("v001" = "DHSCLUST"))
ir[["MW2004DHS"]] <- ir[["MW2004DHS"]] %>%
mutate(district = as_factor(sdist2) %>%
sub("nkhota kota", "nkhotakota", .) %>%
str_to_title)
ir[["MW2010DHS"]] <- ir[["MW2010DHS"]] %>%
left_join(
data.frame("distcode" = attr(ir[["MW2010DHS"]]$sdistrict, "labels"), "district" = names(attr(ir[["MW2010DHS"]]$sdistrict, "labels")) %>%
sub("nkhota kota", "nkhotakota", .) %>%
sub("nkhatabay", "nkhata bay", .) %>%
str_to_title()
),
by = c("sdistrict" = "distcode")
) %>%
mutate(district = as.character(district))
ir[["MW2015DHS"]] <- ir[["MW2015DHS"]] %>%
mutate(district = sub("(.*) - (.*)", "\\1", as_factor(v022)),
district = fct_recode(district,
"nkhotakota" = "nkhota kota",
"nkhata bay" = "nkhatabay") %>%
str_to_title)
geo_2012_mis<- rdhs::get_datasets("MWGE6AFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2012_mis <- st_join(geo_2012_mis, sh32, join = st_intersects, suffix = c("", "_sh32")) %>%
type.convert()  ## Check you haven't fucked this factor conversion up like last time.
ir[["MW2012MIS"]] <- ir[["MW2012MIS"]] %>%
left_join(geo_2012_mis, by = c("v001" = "DHSCLUST"))
geo_2014_mis<- rdhs::get_datasets("MWGE71FL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2014_mis <- st_join(geo_2014_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2014MIS"]] <- ir[["MW2014MIS"]] %>%
left_join(geo_2014_mis, by = c("v001" = "DHSCLUST"))
geo_2017_mis<- rdhs::get_datasets("MWGE7IFL.ZIP")[[1]] %>% readRDS %>% st_as_sf
geo_2017_mis <- st_join(geo_2017_mis, sh32, join = st_intersects, suffix = c("", "_sh32"))
ir[["MW2017MIS"]] <- ir[["MW2017MIS"]] %>%
left_join(geo_2017_mis, by = c("v001" = "DHSCLUST"))
tips_surv <- list("DHS" = c(0, 7), "MIS" = c(0, 5))[surveys$SurveyType]
#            period = list(1995:2017))
#
# tfr <- tfr %>%
#   bind_rows %>%
#   type.convert %>%
#   mutate(v025 = factor(v025, levels= c(1,2), labels = c("Urban", "Rural"))) %>%
#   filter(period <= survyear) %>%
#   mutate(lower = tfr - qnorm(0.975) * se_tfr,
#          upper = tfr + qnorm(0.975) * se_tfr)
#
asfr <- Map(calc_asfr1, ir,
by = list(~surveyid + country + survyear + district),
tips = tips_surv,
agegr= list(15:50),
period = list(1995:2017),
counts = TRUE)
install.packages("INLA", repos="https://inla.r-inla-download.org/R/testing", dependencies=TRUE)
library(tidyverse)
library(magrittr)
library(rdhs)
library(demogsurv)
library(INLA)
library(reshape2)
library(survival)
library(sf)
library(spdep)
library(INLA)
install.packages("INLA")
sessionInfo()
library(INLA)
remove.packages("INLA")
install.packages("INLA")
library(countrycode)
library(tidyverse)
library(magrittr)
library(rdhs)
library(demogsurv)
library(INLA)
library(reshape2)
library(survival)
library(sf)
library(spdep)
library(parallel)
setwd("~/Documents/GitHub/subnat_fertility")
source("fertility_funs.R")
## Get cluster coordinates
clusters <- readRDS("~/Documents/GitHub/naomi-data-edit/oli_cluster.rds") %>%
mutate(iso3 = survey_id) %>%
separate(col="iso3", into="iso3", sep=3)
View(clusters)
unique(clusters$survey_id)
?dhs_surveys
surveys <- dhs_surveys(surveyIds = unique(clusters$survey_id))
str(unique(clusters$survey_id))
unique(clusters$iso3)
is.list(clusters)
?is.list
foo <- c("foo", "bar")
is.list(foo)
## If Namibia is in this list, ensure it's first. Crap but it'll do for now.
iso2 <- c("NM", "RW", "UG", "MZ", "MW", "KE", "ZM", "ZW", "TZ", "LS")
iso2_list <- as.list(iso2)
iso3_list <- lapply(iso2_list, function(x) {x %>% countrycode("iso2c", "iso3c")})
if (iso2[1]=="NM") {
iso3_list[1] <- "NAM"
}
countrycode(iso3_list[[1]], "iso3c", "country.name")
?dhs_countries
dhs_indicators(returnFields=c("IndicatorId","Label","Definition"))
View(dhs_indicators(returnFields=c("IndicatorId","Label","Definition")))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName == "Afghanistan")
countrycode(iso3_list[[1]], "iso3c", "country.name")
str(countrycode(iso3_list[[1]], "iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName == iso3[[1]] %>%
countrycode("iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName == iso3_list[[1]] %>%
countrycode("iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName == iso3_list[[1]] %>%
countrycode("iso3c", "country.name")) %>% .$DHS_CountryCode
iso3_to_dhs <- function(iso3) {
if (is.list(iso3)) {
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName == iso3 %>%
countrycode("iso3c", "country.name")) %>%
.$DHS_CountryCode
} else
print("haven't done not lists yet")
}
unique(clusters$iso3)
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland"))
iso3 <- unique(clusters$iso3)
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
#rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland")) %>%
filter(CountryName == iso3 %>%
countrycode("iso3c", "country.name")) %>%
.$DHS_CountryCode
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
#rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland")) %>%
filter(CountryName %in% iso3
)
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
#rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland")) %>%
filter(CountryName == iso3 %>%
countrycode("iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
#rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland")) %>%
filter(CountryName %in% iso3 %>%
countrycode("iso3c", "country.name"))
iso3 %>%
countrycode("iso3c", "country.name"))
iso3 %>%
countrycode("iso3c", "country.name")
countrycode(iso3, "iso3c", "country.name")
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
#rbind(data.frame("DHS_CountryCode" = "SZ", "CountryName" = "Swaziland")) %>%
filter(CountryName %in% countrycode(iso3, "iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
mutate(CountryName = ifelse(DHS_CountryCode == "SZ", "Eswatini", CountryName)) %>%
filter(CountryName %in% countrycode(iso3, "iso3c", "country.name")) %>%
.$DHS_CountryCode
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
mutate(CountryName = ifelse(DHS_CountryCode == "SZ", "Eswatini", CountryName))
countrycode(iso3, "iso3c", "country.name")
sub("Swaziland", "Eswatini", countrycode(iso3, "iso3c", "country.name"))
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName %in% sub("Swaziland", "Eswatini", countrycode(iso3, "iso3c", "country.name"))) %>%
.$DHS_CountryCode
lapply(iso3_list, function(iso3) {
dhs_countries(returnFields=c("CountryName", "DHS_CountryCode")) %>%
filter(CountryName %in% sub("Swaziland", "Eswatini", countrycode(iso3, "iso3c", "country.name"))) %>%
.$DHS_CountryCode
})
surveys <- dhs_surveys(surveyIds = iso3_to_dhs(unique(clusters$iso3)))
source("fertility_funs.R")
surveys <- dhs_surveys(surveyIds = iso3_to_dhs(unique(clusters$iso3)))
iso3_to_dhs(unique(clusters$iso3))
surveys <- dhs_surveys(surveyIds = c(iso3_to_dhs(unique(clusters$iso3))))
c(iso3_to_dhs(unique(clusters$iso3)))
surveys <- dhs_surveys(countryIds = iso3_to_dhs(unique(clusters$iso3)))
View(surveys)
surveys <- dhs_surveys(countryIds = iso3_to_dhs(unique(clusters$iso3)), surveyYearStart=1995)
iso3_list <- as.list(clusters %>% .$iso3 %>% unique)
iso2_list <- lapply(iso3_list, function(x) {x %>% countrycode("iso3c", "iso2c")})
View(iso2_list)
View(iso3_list)
iso3_list <- as.list(clusters %>% .$iso3 %>% unique)
iso3 <- as.list(clusters %>% .$iso3 %>% unique)
source("fertility_funs.R")
## Get cluster coordinates
clusters <- readRDS("~/Documents/GitHub/naomi-data-edit/oli_cluster.rds") %>%
mutate(iso3 = survey_id) %>%
separate(col="iso3", into="iso3", sep=3)
iso3 <- as.list(clusters %>% .$iso3 %>% unique)
## Get surveys for which we have clusters. Split into country list.
surveys <- dhs_surveys(countryIds = iso3_to_dhs(unique(clusters$iso3)), surveyYearStart=1995) %>%
group_split(CountryName)
View(surveys)
View(surveys)
View(surveys)
clusters <- readRDS("~/Documents/GitHub/naomi-data-edit/oli_cluster.rds")
View(clusters)
## Get cluster coordinates
clusters <- readRDS("~/Documents/GitHub/naomi-data-edit/oli_cluster.rds") %>%
mutate(iso3 = survey_id) %>%
separate(col="iso3", into="iso3", sep=3)
areas <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds")
View(clusters)
View(areas)
foo <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds") %>%
inner_join(clusters, by=c("area_id" = "geoloc_area_id", "iso3"))
View(foo)
?pivot_wider
devtools::install_github("tidyverse/tidyr")
library(tidyr)
foo <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds") %>%
inner_join(clusters, by=c("area_id" = "geoloc_area_id", "iso3")) %>%
?pivot_wider
?pivot_wider
foo <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds") %>%
inner_join(clusters, by=c("area_id" = "geoloc_area_id", "iso3")) %>%
pivot_wider(names_from = area_level)
library(tidyr)
devtools::install_github("tidyverse/tidyr")
devtools::install_github("tidyverse/tidyr")
library(tidyr)
foo <- readRDS("~/Documents/GitHub/naomi-data/data/areas/areas_long.rds") %>%
inner_join(clusters, by=c("area_id" = "geoloc_area_id", "iso3")) %>%
pivot_wider(names_from = area_level)
?tidyr
