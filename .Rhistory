u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
# eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_eta1 = log(2.5),
# log_prec_rw_period = 0,
# log_prec_rw_tips = 0,
# log_prec_rw_age = 0,
# log_prec_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_mf", "u_age", "u_period", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE,
checkParameterOrder=FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
qtls <- apply(fit$sample$lambda_out, 1, quantile, c(0.025, 0.5, 0.975))
summary(qtls)
fit$sample$tau_rw_age
summary(fit$sample$tau_rw_age)
summary(fit$sample$tau_rw_period)
mod$summary.hyperpar
mod
formula
get_mod_results_test(mod)
get_mod_results_test(mod, asfr)
mf_out %>%
# left_join(areas_long) %>%
cbind(data.frame(val = f$report()$lambda_out)) %>%
type.convert() %>%
left_join(areas_long) %>%
filter(area_level ==0) %>%
ggplot(aes(x=period, y=val, group=source, color=source)) +
geom_line() +
# geom_point(data=mics_plot %>% bind_rows(asfr_admin1), aes(y=asfr, color=survtype)) +
facet_wrap(~area_id)
f$report()
dyn.unload(dynlib(here("tmb/fertility_tmb_dev")))
compile(here("tmb/fertility_tmb_dev.cpp"))               # Compile the C++ file
dyn.load(dynlib(here("tmb/fertility_tmb_dev")))
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_nat = M_obs_nat,
X_tips_dummy = X_tips_dummy,
# X_tips_dummy_nat = X_tips_dummy_nat,
Z_tips = Z_tips,
# Z_tips_nat = Z_tips_nat,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
R_spatial = R_spatial,
log_offset = log(obs$pys),
# log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
# births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out
# A_nat = A_nat
# A_rate = A_rate
)
data <- list(X_mf = X_mf,
M_obs = M_obs,
# M_obs_nat = M_obs_nat,
# X_tips_dummy = X_tips_dummy,
# X_tips_dummy_nat = X_tips_dummy_nat,
# Z_tips = Z_tips,
# Z_tips_nat = Z_tips_nat,
Z_age = Z_age,
Z_period = Z_period,
Z_spatial = Z_spatial,
# Z_interaction = sparse.model.matrix(~0 + id.interaction, mf),
# Z_interaction1 = sparse.model.matrix(~0 + id.interaction1, mf),
# Z_interaction2 = sparse.model.matrix(~0 + id.interaction2, mf),
# Z_interaction3 = sparse.model.matrix(~0 + id.interaction3, mf),
R_tips = R_tips,
R_age = R_age,
R_period = R_period,
R_spatial = R_spatial,
log_offset = log(obs$pys),
# log_offset_nat = log(obs_nat$pys),
births_obs = obs$births,
# births_obs_nat = obs_nat$births,
pop = mf$population,
A_out = A_out
# A_nat = A_nat
# A_rate = A_rate
)
par <- list(
beta_mf = rep(0, ncol(X_mf)),
# beta_0 = 0,
# beta_tips_dummy = rep(0, ncol(X_tips_dummy)),
# u_tips = rep(0, ncol(Z_tips)),
u_age = rep(0, ncol(Z_age)),
u_period = rep(0, ncol(Z_period)),
u_spatial_str = rep(0, ncol(Z_spatial)),
u_spatial_iid = rep(0, ncol(Z_spatial)),
# eta = array(0, c(ncol(Z_spatial), ncol(Z_age), ncol(Z_period))),
# eta1 = array(0, c(ncol(Z_period), ncol(Z_age))),
# eta2 = array(0, c(ncol(Z_spatial), ncol(Z_period))),
# eta3 = array(0, c(ncol(Z_spatial), ncol(Z_age))),
log_sigma_rw_period = log(2.5),
# log_sigma_rw_tips = log(2.5),
log_sigma_rw_age = log(2.5),
# log_sigma_eta1 = log(2.5),
# log_prec_rw_period = 0,
# log_prec_rw_tips = 0,
# log_prec_rw_age = 0,
# log_prec_eta1 = log(2.5),
log_sigma_spatial = log(2.5),
logit_spatial_rho = 0
)
f <- mcparallel({TMB::MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
silent=0,
checkParameterOrder=FALSE)
})
mccollect(f)
obj <-  MakeADFun(data = data,
parameters = par,
DLL = "fertility_tmb_dev",
#  random = c("beta_mf", "beta_tips_dummy", "u_tips", "u_age", "u_period", "u_spatial_str", "u_spatial_iid", "eta1", "eta2", "eta3"),
random = c("beta_mf", "u_age", "u_period", "u_spatial_str", "u_spatial_iid"),
hessian = FALSE,
checkParameterOrder=FALSE)
f <- nlminb(obj$par, obj$fn, obj$gr)
f$par.fixed <- f$par
f$par.full <- obj$env$last.par
fit <- c(f, obj = list(obj))
fit$sdreport <- sdreport(fit$obj, fit$par)
fit <- sample_tmb_test(fit)
qtls <- apply(fit$sample$lambda_out, 1, quantile, c(0.025, 0.5, 0.975))
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
left_join(areas_long) %>%
filter(area_level ==2) %>%
ggplot(aes(x=period, y=median, group=age_group)) +
geom_line(aes(color=age_group)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=age_group), alpha=0.3) +
facet_wrap(~area_id) +
ylim(0,0.5)
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
left_join(areas_long)
inla <- get_mod_results_test(mod, asfr)
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
bind_rows(inla)
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
bind_rows(inla %>% type.convert)
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
bind_rows(inla %>% type.convert())
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]) %>%
type.convert() %>%
bind_rows(inla %>% type.convert())
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
bind_rows(inla %>% mutate(source = "inla")) %>%
left_join(areas_long) %>%
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=median, group=source, color = source)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=age_group), alpha=0.3) +
facet_wrap(~area_id) +
ylim(0,0.5)
saveRDS(inla, "jeff_inla.rds")
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb")
inla <- readRDS("jeff_inla.res")
inla <- readRDS("jeff_inla.rds")
inla <- readRDS(here("jeff_inla.rds"))
View(get_mod_results_test)
debugonce(get_mod_results_test)
get_mod_results_test(mod, asfr)
get_mod_results_test <- function(mod, asfr_pred_country_subnat) {
asfr1_country_subnat <- asfr_pred_country_subnat %>%
filter(!is.na(surveyid))
print("Sampling..")
samples <- inla.posterior.sample(10, mod)
print("Done sampling")
contents = mod$misc$configs$contents
effect = "Predictor"
id.effect = which(contents$tag==effect)
ind.effect = contents$start[id.effect]-1 + (1:contents$length[id.effect])
ind.effect <- 1:(nrow(asfr_pred_country_subnat) - nrow(asfr1_country_subnat))
samples.effect = lapply(samples, function(x) x$latent[ind.effect] %>% exp)
ident <- asfr_pred_country_subnat[ind.effect, ] %>%
select(area_id, age_group, period)
#
# left_join(pop_areas) %>%
# filter(period>1999) %>%
# mutate(ratio0 = population/id0_agepop,
#        ratio1 = population/id1_agepop,
#        ratio2 = population/id2_agepop,
#        ratio3 = population/id3_agepop,
#        ratio4 = population/id4_agepop
# )
samples_ident <- sapply(samples.effect, cbind) %>%
data.frame %>%
# mutate(id =row_number()) %>%
# left_join(asfr_pred_country_subnat[ind.effect , c("iso3", "area_id", "period", "age_group", "id")], by="id") %>%
# select(-id) %>%
cbind(ident)
samples_ident$median <- apply(samples_ident[, 1:1000], 1, median)
qtls <- apply(sapply(samples.effect, cbind), 1, quantile, c(0.025, 0.5, 0.975))
samples_ident <- samples_ident %>%
select(area_id, period, age_group, median)
return(samples_ident)
}
debugonce(get_mod_results_test)
get_mod_results_test(mod, asfr)
get_mod_results_test <- function(mod, asfr_pred_country_subnat) {
asfr1_country_subnat <- asfr_pred_country_subnat %>%
filter(!is.na(surveyid))
print("Sampling..")
samples <- inla.posterior.sample(10, mod)
print("Done sampling")
contents = mod$misc$configs$contents
effect = "Predictor"
id.effect = which(contents$tag==effect)
ind.effect = contents$start[id.effect]-1 + (1:contents$length[id.effect])
ind.effect <- 1:(nrow(asfr_pred_country_subnat) - nrow(asfr1_country_subnat))
samples.effect = lapply(samples, function(x) x$latent[ind.effect] %>% exp)
ident <- asfr_pred_country_subnat[ind.effect, ] %>%
select(area_id, age_group, period)
#
# left_join(pop_areas) %>%
# filter(period>1999) %>%
# mutate(ratio0 = population/id0_agepop,
#        ratio1 = population/id1_agepop,
#        ratio2 = population/id2_agepop,
#        ratio3 = population/id3_agepop,
#        ratio4 = population/id4_agepop
# )
samples_ident <- sapply(samples.effect, cbind) %>%
data.frame %>%
# mutate(id =row_number()) %>%
# left_join(asfr_pred_country_subnat[ind.effect , c("iso3", "area_id", "period", "age_group", "id")], by="id") %>%
# select(-id) %>%
cbind(ident)
# samples_ident$median <- apply(samples_ident[, 1:1000], 1, median)
qtls <- apply(sapply(samples.effect, cbind), 1, quantile, c(0.025, 0.5, 0.975))
samples_ident <- samples_ident %>%
select(area_id, period, age_group, median)
return(samples_ident)
}
debugonce(get_mod_results_test)
get_mod_results_test(mod, asfr)
View(qtls)
View(samples_ident)
get_mod_results_test <- function(mod, asfr_pred_country_subnat) {
asfr1_country_subnat <- asfr_pred_country_subnat %>%
filter(!is.na(surveyid))
print("Sampling..")
samples <- inla.posterior.sample(1000, mod)
print("Done sampling")
contents = mod$misc$configs$contents
effect = "Predictor"
id.effect = which(contents$tag==effect)
ind.effect = contents$start[id.effect]-1 + (1:contents$length[id.effect])
ind.effect <- 1:(nrow(asfr_pred_country_subnat) - nrow(asfr1_country_subnat))
samples.effect = lapply(samples, function(x) x$latent[ind.effect] %>% exp)
ident <- asfr_pred_country_subnat[ind.effect, ] %>%
select(area_id, age_group, period)
#
# left_join(pop_areas) %>%
# filter(period>1999) %>%
# mutate(ratio0 = population/id0_agepop,
#        ratio1 = population/id1_agepop,
#        ratio2 = population/id2_agepop,
#        ratio3 = population/id3_agepop,
#        ratio4 = population/id4_agepop
# )
# samples_ident <- sapply(samples.effect, cbind) %>%
#   data.frame %>%
#   # mutate(id =row_number()) %>%
#   # left_join(asfr_pred_country_subnat[ind.effect , c("iso3", "area_id", "period", "age_group", "id")], by="id") %>%
#   # select(-id) %>%
#   cbind(ident)
# samples_ident$median <- apply(samples_ident[, 1:1000], 1, median)
qtls <- apply(sapply(samples.effect, cbind), 1, quantile, c(0.025, 0.5, 0.975))
samples_ident <- ident %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]
)
# samples_ident <- samples_ident %>%
#   select(area_id, period, age_group, median)
return(samples_ident)
}
debugonce(get_mod_results_test)
get_mod_results_test(mod, asfr)
View(samples_ident)
get_mod_results_test <- function(mod, asfr_pred_country_subnat) {
asfr1_country_subnat <- asfr_pred_country_subnat %>%
filter(!is.na(surveyid))
print("Sampling..")
samples <- inla.posterior.sample(1000, mod)
print("Done sampling")
contents = mod$misc$configs$contents
effect = "Predictor"
id.effect = which(contents$tag==effect)
ind.effect = contents$start[id.effect]-1 + (1:contents$length[id.effect])
ind.effect <- 1:(nrow(asfr_pred_country_subnat) - nrow(asfr1_country_subnat))
samples.effect = lapply(samples, function(x) x$latent[ind.effect] %>% exp)
ident <- asfr_pred_country_subnat[ind.effect, ] %>%
select(area_id, age_group, period)
qtls <- apply(sapply(samples.effect, cbind), 1, quantile, c(0.025, 0.5, 0.975))
samples_ident <- ident %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,]
)
return(samples_ident)
}
inla <- get_mod_results_test(mod, asfr)
saveRDS(inla,"jeff_inla.rds")
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
bind_rows(inla %>% mutate(source = "inla")) %>%
left_join(areas_long) %>%
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=median, group=source, color = source)) +
geom_line() +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=age_group), alpha=0.3) +
facet_wrap(~area_id) +
ylim(0,0.5)
mf_out %>%
mutate(lower = qtls[1,],
median = qtls[2,],
upper = qtls[3,],
source = "tmb") %>%
type.convert() %>%
bind_rows(inla %>% mutate(source = "inla")) %>%
left_join(areas_long) %>%
filter(area_level ==2, age_group == "20-24") %>%
ggplot(aes(x=period, y=median, group=source)) +
geom_line(aes(color = source)) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill=source), alpha=0.3) +
facet_wrap(~area_id) +
ylim(0,0.5)
# inla <- get_mod_results_test(mod, asfr)
saveRDS(mod,"jeff_inla_mod.rds")
mod$summary.hyperpar
plot(rbeta(1000, 0.5, 0.5))
hist(rbeta(1000, 0.5, 0.5))
hist(rbeta(10000, 0.5, 0.5))
mod$internal.marginals.hyperpar
hyper <- mod$internal.marginals.hyperpar
View(hyper)
hyper[[1]]
hyper[[1]]$y
hyper[[1]][,2]
exp(hyper[[1]][,2])
plot(exp(hyper[[1]][,2]))
plot(hyper[[1]][,1], exp(hyper[[1]][,2]))
hyper[[1]][,1], exp(hyper[[1]][,2]
inla_hyper <- list(age = data.frame(x=hyper[[1]][,1], y=exp(hyper[[1]][,2])))
View(inla_hyper)
inla_hyper <- list(
age = data.frame(x=hyper[[1]][,1], y=exp(hyper[[1]][,2])),
period = data.frame(x=hyper[[2]][,1], y=exp(hyper[[2]][,2])),
district = data.frame(x=hyper[[3]][,1], y=exp(hyper[[3]][,2])),
district_phi = data.frame(x=hyper[[3]][,1], y=exp(hyper[[3]][,2])/(1+exp(hyper[[3]][,2])))
)
plot(inla_hyper$age)
plot(inla_hyper$period)
plot(inla_hyper$district)
plot(inla_hyper$district_phi)
mod$internal.summary.hyperpar
exp(5.87)
exp(5.85)
mod$all.hyper
mod$summary.hyperpar
library(TMB)
library(tidyverse)
library(abind)
library(sf)
library(spdep)
library(Matrix)
library(countrycode)
library(haven)
library(survival)
library(parallel)
library(demogsurv)
devtools::load_all("~/Documents/GitHub/naomi")
# library(naomi)
library(here)
naomi_data_path <- "~/Documents/GitHub/naomi-data"
# naomi_data_path <- "~/GitHub/naomi-data"
source(here("R/inputs.R"))
source(here("R/fertility_funs.R"))
iso3_current <- "ZWE"
##sorry..
list2env(make_areas_population("ZWE", naomi_data_path, full = FALSE), globalenv())
asfr <- get_asfr_pred_df("ZWE", 2, project = FALSE)
population <- population %>%
filter(period == min(period), sex=="female")
area_merged <- st_read(file.path(naomi_data_path, "ZWE/data/zwe_areas.geojson"))
areas <- create_areas(area_merged = area_merged)
area_aggregation <- create_area_aggregation(area_merged$area_id[area_merged$naomi_level], areas)
## Make model frame.
mf <- crossing(period = factor(1995:2015),
age_group = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"),
area_id = filter(areas_long, iso3 == iso3_current, area_level == 2)$area_id) %>%
left_join(population %>%
select(area_id, age_group, population)
) %>%
mutate(area_id = factor(area_id, levels = filter(areas_long, iso3 == iso3_current,  area_level == 2)$area_id),
age_group = factor(age_group, levels = c("15-19", "20-24", "25-29", "30-34", "35-39", "40-44", "45-49"))
) %>%
arrange(period, area_id, age_group) %>%
mutate(idx = factor(row_number()),
id.interaction_3d = factor(group_indices(., age_group, period, area_id)),
# id.interaction_age_time = factor(group_indices(., age_group, period)),
id.interaction1 = factor(group_indices(., age_group, period)),
id.interaction2 = factor(group_indices(., period, area_id)),
id.interaction3 = factor(group_indices(., age_group, area_id))
)
obs <- asfr %>%
mutate(period = factor(period, levels(mf$period))) %>%
filter(!is.na(surveyid)) %>%
select(area_id, period, age_group, tips, births, pys) %>%
left_join(mf) %>%
mutate(tips_dummy = as.integer(tips > 5),
tips_f = factor(tips),
age_group = factor(age_group, levels(mf$age_group)),
area_id = factor(area_id, levels(mf$area_id)),
period = factor(period, levels(mf$period)),
)
X_mf <- model.matrix(~1 + age_group + period + area_id, mf)
Z_spatial <- sparse.model.matrix(~0 + area_id, mf)
Z_age <- sparse.model.matrix(~0 + age_group, mf)
Z_period <- sparse.model.matrix(~0 + period, mf)
#' This has dimensions (number of observations) x (number of rows in model frame (i.e crossing of age x time x space))
#' Many more rows than mf because observations has things we need to adjust for bias (e.g. tips), but not required in model frame.
#' Column index (idx) has been joined onto obs dataframe from mf. So now each observation is labelled with the appropriate index in the mf
M_obs <- sparse.model.matrix(~0 + idx, obs)
sh <- areas_long %>%
filter(iso3 == iso3_current, area_level ==2) %>%
mutate(area_idx = row_number())
#' Neighbor list
nb <- sh %>%
left_join(boundaries) %>%
st_as_sf %>%
as("Spatial") %>%
spdep::poly2nb() %>%
`names<-`(sh$area_idx)
adj <- nb2mat(nb, zero.policy=TRUE, style="B")
R_spatial <- INLA::inla.scale.model(diag(rowSums(adj)) - 0.99*adj,
constr = list(A = matrix(1, 1, nrow(adj)), e = 0))
D_age <- diff(diag(ncol(Z_age)), differences = 1)
R_age <- t(D_age) %*% D_age
diag(R_age) <- diag(R_age) + 1E-6
R_age <- as(R_age, "dgCMatrix")
D_period <- diff(diag(ncol(Z_period)), differences = 2)
R_period <- t(D_period) %*% D_period
diag(R_period) <- diag(R_period) + 1E-6
